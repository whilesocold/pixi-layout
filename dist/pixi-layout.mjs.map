{"version":3,"file":"pixi-layout.mjs","sources":["../src/utils/helpers.ts","../src/controllers/ContentController.ts","../src/controllers/SizeController.ts","../src/utils/constants.ts","../src/controllers/StyleController.ts","../src/Layout.ts","../src/controllers/AlignController.ts"],"sourcesContent":["import { Text } from 'pixi.js';\nimport { LayoutSystem } from '../Layout';\nimport { PixiTextStyle } from './text';\nimport { FlexNumber, Styles } from './types';\n\nexport function rgba2Hex([r, g, b]: number[]): number\n{\n    return parseInt(`0x${getHex(r)}${getHex(g)}${getHex(b)}`, 16);\n}\n\nexport function getHex(n: number)\n{\n    const hex = n.toString(16);\n\n    return hex.length === 1 ? `0${hex}` : hex;\n}\n\nexport function isDefined(value: any): boolean\n{\n    return value !== undefined && value !== null;\n}\n\nexport function getNumber(value: FlexNumber, maxPercentValue?: number): number\n{\n    if (value === undefined)\n    {\n        return undefined;\n    }\n\n    if (typeof value === 'number')\n    {\n        return value;\n    }\n\n    if (typeof value === 'string')\n    {\n        if (value.endsWith('px'))\n        {\n            return Math.floor(parseInt(value.slice(0, -2), 10));\n        }\n        else if (value.endsWith('%'))\n        {\n            const val = parseInt(value.slice(0, -1), 10);\n\n            return Math.floor(\n                maxPercentValue ? (maxPercentValue / 100) * val : val\n            );\n        }\n\n        return Math.floor(parseInt(value, 10));\n    }\n\n    return 0;\n}\n\nexport function stylesToPixiTextStyles(styles: Styles): PixiTextStyle\n{\n    const resultStyles: PixiTextStyle = {\n        align: styles?.textAlign,\n        breakWords: styles?.breakWords,\n        dropShadow: styles?.dropShadow,\n        fill: styles?.fill ?? styles?.color,\n\n        fontFamily: styles?.fontFamily,\n        fontSize: styles?.fontSize,\n        fontStyle: styles?.fontStyle,\n        fontVariant: styles?.fontVariant,\n        fontWeight: styles?.fontWeight,\n        leading: styles?.leading,\n        textBaseline: styles?.textBaseline,\n        letterSpacing: styles?.letterSpacing,\n        lineHeight: styles?.lineHeight,\n        trim: styles?.trim,\n        // padding: styles?.padding ?? 0,\n        stroke: styles?.stroke,\n        whiteSpace: styles?.whiteSpace,\n        wordWrap: styles?.wordWrap,\n        wordWrapWidth: styles?.wordWrapWidth ?? 100,\n    };\n\n    for (const key in resultStyles)\n    {\n        if (resultStyles[key as keyof Partial<PixiTextStyle>] === undefined)\n        {\n            delete resultStyles[key as keyof Partial<PixiTextStyle>];\n        }\n    }\n\n    return resultStyles;\n}\n\n/**\n * Detect if layout is just a wrapper for a text element.\n * @param {LayoutSystem} layout - Layout to check.\n */\nexport function isItJustAText(layout: LayoutSystem): boolean\n{\n    const hasOnly1Child = layout.content.children.size === 1;\n\n    if (hasOnly1Child)\n    {\n        const firstChild = layout.content.children.entries().next().value[1];\n\n        return firstChild instanceof Text;\n    }\n\n    return false;\n}\n","/* eslint-disable no-case-declarations */\nimport { Container, Graphics, Sprite, Text } from 'pixi.js';\nimport { Layout, LayoutSystem } from '../Layout';\nimport { stylesToPixiTextStyles } from '../utils/helpers';\nimport { PixiTextStyle } from '../utils/text';\nimport {\n    Content,\n    ContentList,\n    ContentType,\n    LayoutOptions,\n    LayoutStyles,\n} from '../utils/types';\n\n/** Controls all {@link LayoutSystem} children sizing. */\nexport class ContentController\n{\n    protected layout: LayoutSystem;\n\n    /**\n     * List of all children of the layout, controlled by this controller.\n     * As the layout is a container, you can use all container methods on it,\n     * including addChild, but only elements added by layout\n     * config thought constructor of {@link ContentController} or using\n     * `addContent` method will be managed by this controller.\n     */\n    children: Map<string, Container> = new Map();\n\n    /**\n     * Creates all instances and manages configs\n     * @param {LayoutSystem} layout - Layout instance\n     * @param content - Content of the layout\n     * @param globalStyles - Global styles for layout and it's children\n     */\n    constructor(\n        layout: LayoutSystem,\n        content?: Content,\n        globalStyles?: LayoutStyles\n    )\n    {\n        this.layout = layout;\n        this.children = new Map();\n        this.createContent(content, globalStyles);\n\n        this.layout.container.on('childRemoved', (child) =>\n            this.onChildRemoved(child)\n        );\n    }\n\n    /**\n     * Adds content to the layout.\n     * @param {Content} content - Content of the layout\n     * @param {LayoutStyles} parentGlobalStyles - Global styles for layout and it's children\n     */\n    createContent(content?: Content, parentGlobalStyles?: LayoutStyles)\n    {\n        if (!content) return;\n\n        const contentType = this.getContentType(content);\n        const customID = this.newID;\n\n        switch (contentType)\n        {\n            case 'layout':\n                const layout = content as Layout;\n\n                if (!layout.id)\n                {\n                    layout.id = `layout-${customID}`;\n                }\n\n                this.addContentElement(layout.id, layout);\n                break;\n            case 'container':\n                this.addContentElement(\n                    `container-${customID}`,\n                    content as Container\n                );\n                break;\n            case 'string':\n                const text = new Text({\n                    text: content,\n                    style: this.layout.textStyle,\n                });\n\n                this.addContentElement(`text-${customID}`, text);\n                break;\n            case 'text':\n                const textInstance = content as Text;\n\n                for (const key in this.layout.textStyle)\n                {\n                    const styleKey = key as keyof PixiTextStyle;\n\n                    (textInstance.style as any)[styleKey]\n                        = this.layout.textStyle[styleKey];\n                }\n\n                this.addContentElement(`text-${customID}`, textInstance);\n                break;\n            case 'layoutConfig':\n                const layoutConfig = content as LayoutOptions;\n\n                if (parentGlobalStyles)\n                {\n                    if (layoutConfig.globalStyles)\n                    {\n                        layoutConfig.globalStyles = {\n                            ...parentGlobalStyles,\n                            ...(layoutConfig.globalStyles as any),\n                        };\n                    }\n                    else\n                    {\n                        layoutConfig.globalStyles = { ...parentGlobalStyles };\n                    }\n                }\n\n                if (!layoutConfig.id)\n                {\n                    layoutConfig.id = `layout-${customID}`;\n                }\n\n                this.addContentElement(\n                    layoutConfig.id,\n                    new Layout(layoutConfig)\n                );\n                break;\n            case 'object':\n                const contentList = content as ContentList[];\n\n                // this is where we are managing object keys, and assign them as ids of the added elements\n                for (const id in contentList)\n                {\n                    const idKey = id as keyof typeof content;\n                    const contentElement = content[idKey] as any;\n\n                    const contentType = this.getContentType(contentElement);\n                    let defaultStyles = this.layout.textStyle; // default text style of the layout\n\n                    switch (contentType)\n                    {\n                        case 'string':\n                            if (\n                                parentGlobalStyles\n                                && parentGlobalStyles[idKey]\n                            )\n                            {\n                                // if there are predefined styles for this id\n                                defaultStyles = {\n                                    ...defaultStyles,\n                                    ...stylesToPixiTextStyles(\n                                        parentGlobalStyles[idKey]\n                                    ),\n                                };\n                            }\n\n                            const text = new Text({\n                                text: contentElement,\n                                style: defaultStyles,\n                            });\n\n                            this.addContentElement(idKey, text);\n                            break;\n                        case 'text':\n                            const textInstance = contentElement as Text;\n\n                            if (\n                                parentGlobalStyles\n                                && parentGlobalStyles[idKey]\n                            )\n                            {\n                                // if there are predefined styles for this id\n                                defaultStyles = {\n                                    ...defaultStyles,\n                                    ...stylesToPixiTextStyles(\n                                        parentGlobalStyles[idKey]\n                                    ),\n                                };\n                            }\n\n                            textInstance.style = defaultStyles;\n\n                            this.addContentElement(idKey, textInstance);\n                            break;\n                        case 'layout':\n                            const layoutInstance = contentElement as Layout;\n\n                            if (\n                                parentGlobalStyles\n                                && parentGlobalStyles[idKey]\n                            )\n                            {\n                                layoutInstance.setStyles(\n                                    parentGlobalStyles[idKey]\n                                );\n                                layoutInstance.layout.updateParents();\n                            }\n\n                            this.createContent(layoutInstance);\n                            break;\n                        case 'container':\n                            this.addContentElement(idKey, contentElement);\n                            break;\n                        case 'layoutConfig':\n                            this.createContent({\n                                ...contentElement,\n                                globalStyles: parentGlobalStyles,\n                                id: idKey, // we are rewriting this id with the key of the object, even if it is set\n                            });\n                            break;\n                        case 'object':\n                            this.createContent(\n                                contentElement,\n                                parentGlobalStyles\n                            );\n                            break;\n                        case 'array':\n                            this.createContent(\n                                contentElement,\n                                parentGlobalStyles\n                            );\n                            break;\n                        default: // do nothing\n                    }\n                }\n                break;\n            case 'array':\n                const contentArray = content as Array<LayoutOptions>;\n\n                contentArray.forEach((content) =>\n                    this.createContent(content, parentGlobalStyles)\n                );\n                break;\n            default:\n                throw new Error('Unknown content type of the layout.');\n        }\n    }\n\n    /**\n     * Adds content element to the layout and register it in Content controller registry.\n     * @param {string} id - ID of the element.\n     * @param {Container } content - pixi container instance to be added.\n     */\n    addContentElement(id: string, content: Container)\n    {\n        if (id && this.children.has(id))\n        {\n            console.error(\n                `Element with '${id}' duplicates, be careful using id selectors with it.`\n            );\n        }\n\n        this.children.set(id, content);\n        this.layout.container.addChild(content);\n    }\n\n    /**\n     * Get first child of the layout\n     * @returns {Container} - First child of the layout\n     */\n    get firstChild(): Container\n    {\n        return this.children.get(this.children.keys().next().value);\n    }\n\n    /**\n     * Resizes all children.\n     * @param width\n     * @param height\n     */\n    resize(width: number, height: number)\n    {\n        this.children.forEach((child) =>\n        {\n            if (child.isPixiLayout || child instanceof Layout)\n            {\n                child.layout.resize(width, height);\n            }\n        });\n    }\n\n    protected get newID(): string\n    {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    /**\n     * Get element from the layout child tree by it's ID\n     * @param id\n     */\n    getByID(id: string): Container | undefined\n    {\n        let result = this.children.get(id);\n\n        if (!result)\n        {\n            this.children.forEach((child) =>\n            {\n                if (child.isPixiLayout || child instanceof Layout)\n                {\n                    const res = child.layout.content.getByID(id);\n\n                    if (res)\n                    {\n                        result = res;\n                    }\n                }\n            });\n        }\n\n        return result;\n    }\n\n    protected getContentType(content: Content): ContentType\n    {\n        if (typeof content === 'string') return 'string';\n\n        if (content instanceof Text) return 'text';\n\n        if (content instanceof Layout) return 'layout';\n\n        if ((content as any).isPixiLayout) return 'layout';\n\n        if (\n            content instanceof Sprite\n            || content instanceof Graphics\n            || content instanceof Container\n        )\n        {\n            if (content.isPixiLayout) return 'layout';\n\n            return 'container';\n        }\n\n        if (Array.isArray(content)) return 'array';\n\n        if (typeof content === 'object')\n        {\n            if (content?.content)\n            {\n                return 'layoutConfig';\n            }\n\n            return 'object';\n        }\n\n        return 'unknown';\n    }\n\n    /**\n     * Removes content by its id.\n     * @param id\n     */\n    removeContent(id: string)\n    {\n        const content = this.getByID(id);\n\n        if (content)\n        {\n            this.layout.container.removeChild(content);\n            this.children.delete(id);\n        }\n    }\n\n    protected onChildRemoved(child: Container)\n    {\n        const registeredChild = this.getChild(child);\n\n        if (registeredChild)\n        {\n            this.children.delete(registeredChild);\n            this.layout.updateParents();\n        }\n    }\n\n    protected getChild(childInstance: Container): string | undefined\n    {\n        for (const [key, value] of this.children.entries())\n        {\n            if (value === childInstance)\n            {\n                return key;\n            }\n        }\n\n        return undefined;\n    }\n}\n","/* eslint-disable no-case-declarations */\nimport { Container, Graphics, NineSliceSprite, Sprite, Text, TilingSprite } from 'pixi.js';\nimport { LayoutSystem } from '../Layout';\nimport { getNumber, isItJustAText } from '../utils/helpers';\nimport { FlexNumber, SizeControl } from '../utils/types';\n\n/** Size controller manages {@link LayoutSystem} and it's content size. */\nexport class SizeController\n{\n    protected layout: LayoutSystem;\n    protected _width: number;\n    protected _height: number;\n    protected bg: Graphics | Container;\n    protected overflowMask: Graphics;\n\n    parentWidth = 0;\n    parentHeight = 0;\n\n    /**\n     * Creates size controller.\n     * @param {LayoutSystem} layout - Layout to control.\n     */\n    constructor(layout: LayoutSystem)\n    {\n        this.layout = layout;\n    }\n\n    /**\n     * Updates layout size and all children sizes\n     * @param {number} parentWidth - Parent width\n     * @param {number} parentHeight - Parent height\n     */\n    resize(parentWidth?: number, parentHeight?: number)\n    {\n        let finalWidth = 0;\n        let finalHeight = 0;\n\n        if (parentWidth !== undefined)\n        {\n            this.parentWidth = parentWidth;\n        }\n\n        if (parentHeight !== undefined)\n        {\n            this.parentHeight = parentHeight;\n        }\n\n        const {\n            width,\n            height,\n            maxWidth,\n            maxHeight,\n            minWidth,\n            minHeight,\n            scaleX,\n            scaleY,\n            background,\n            paddingLeft,\n            paddingRight,\n            paddingTop,\n            paddingBottom,\n            aspectRatio,\n        } = this.layout.style;\n\n        const widthModificator = this.getAutoSizeModificator(width);\n        const heightModificator = this.getAutoSizeModificator(height);\n\n        switch (widthModificator)\n        {\n            case 'innerText':\n                // width is auto, there is only 1 child and it is text\n                // wordWrap style is true\n                // resize basing on text width\n\n                // try to fit text in one line\n                this.innerText.style.wordWrap = false;\n\n                const parentPaddingLeft\n                    = this.layout.container.parent?.layout?.style?.paddingLeft\n                    ?? 0;\n                const parentPaddingRight\n                    = this.layout.container.parent?.layout?.style?.paddingRight\n                    ?? 0;\n\n                const paddings\n                    = paddingLeft\n                    + paddingRight\n                    + parentPaddingLeft\n                    + parentPaddingRight;\n\n                const availableSpaceHor = this.parentWidth - paddings;\n                const needToBeResized\n                    = this.innerText.width + paddings > this.parentWidth;\n\n                if (needToBeResized)\n                {\n                    this.innerText.style.wordWrap = true;\n\n                    this.innerText.style.wordWrapWidth = availableSpaceHor;\n                }\n\n                const textWidthPaddings\n                    = this.innerText.width + paddingLeft + paddingRight;\n\n                finalWidth = textWidthPaddings;\n                break;\n\n            case 'background':\n                // width is auto, there is more than 1 child or it is not text\n                // resize basing on background width\n                finalWidth = (background as Container).width;\n\n                break;\n\n            case 'contentSize':\n                // width is basing on content\n                let childrenWidth = 0;\n\n                // we need to resize content, as it will update the sizes of the children first\n                this.layout.content.resize(this.parentWidth, this.parentHeight);\n\n                const { firstChild } = this.layout.content;\n\n                // add first element as at lease one element to set width\n                if (firstChild && firstChild.layout)\n                {\n                    childrenWidth\n                        += firstChild.width\n                        + firstChild.layout.style.marginLeft\n                        + firstChild.layout.style.marginRight;\n                }\n                else if (\n                    firstChild instanceof Container\n                    && firstChild.width\n                )\n                {\n                    childrenWidth += firstChild.width;\n                }\n\n                this.layout.content.children.forEach((child) =>\n                {\n                    if (child === firstChild)\n                    {\n                        // skip first element as it was already added\n                        return;\n                    }\n\n                    if (\n                        child.layout\n                        && child.layout.style.display !== 'block'\n                    )\n                    {\n                        if (child.layout.style.position)\n                        {\n                            return;\n                        }\n\n                        childrenWidth\n                            += child.width + child.layout.style.marginLeft;\n                    }\n                    else if (child instanceof Container && child.width)\n                    {\n                        childrenWidth += child.width;\n                    }\n                });\n\n                // height is basing on content height\n                finalWidth = childrenWidth + paddingLeft + paddingRight;\n                break;\n\n            case 'parentSize':\n                // resize to parent width\n                finalWidth = this.parentWidth;\n\n                break;\n\n            case 'static':\n            default:\n                finalWidth = getNumber(width, this.parentWidth);\n                break;\n        }\n\n        switch (heightModificator)\n        {\n            case 'innerText':\n                // height is auto, there is only 1 child and it is text\n                // resize basing on text height\n                finalHeight\n                    = this.innerText?.height + paddingBottom + paddingTop;\n\n                break;\n\n            case 'background':\n                // height is auto, there is more than 1 child or it is not text\n                // resize basing on background height\n                finalHeight = (background as Container).height;\n\n                break;\n\n            case 'parentSize':\n                // resize to parent width\n                finalHeight = this.parentHeight;\n\n                break;\n\n            case 'contentSize':\n                // height is basing on content\n                let childrenHeight = 0;\n\n                // we need to resize content, as it will update the sizes of the children first\n                this.layout.content.resize(this.parentWidth, this.parentHeight);\n\n                const { firstChild } = this.layout.content;\n\n                // add first element as at lease one element to set width\n                if (firstChild instanceof Container && firstChild.height)\n                {\n                    childrenHeight += firstChild.height;\n                }\n                else if (firstChild && firstChild.layout)\n                {\n                    if (!firstChild.layout.style.position)\n                    {\n                        childrenHeight += firstChild.height;\n                    }\n                }\n\n                this.layout.content.children.forEach((child) =>\n                {\n                    if (child === firstChild)\n                    {\n                        // skip first element as it was already added\n                        return;\n                    }\n\n                    if (child.layout && child.layout.style.position)\n                    {\n                        // skip absolute positioned elements\n                        return;\n                    }\n\n                    if (child.layout)\n                    {\n                        if (child.layout.style.display === 'block')\n                        {\n                            childrenHeight += child.height;\n                        }\n                        else if (child.height > childrenHeight)\n                        {\n                            childrenHeight = child.height;\n                        }\n                    }\n                    else if (child.height > childrenHeight)\n                    {\n                        childrenHeight = child.height;\n                    }\n                });\n\n                if (isItJustAText(this.layout))\n                {\n                    finalHeight = this.innerText?.height;\n                }\n\n                // height is basing on content height\n                finalHeight = childrenHeight + paddingTop + paddingBottom;\n\n                break;\n\n            case 'static':\n            default:\n                finalHeight = getNumber(height, this.parentHeight);\n                break;\n        }\n\n        if (finalWidth < 0) finalWidth = 0;\n        if (finalHeight < 0) finalHeight = 0;\n\n        this._width = finalWidth;\n        this._height = finalHeight;\n\n        this.layout.container.scale.set(scaleX, scaleY);\n\n        if (\n            aspectRatio === 'flex'\n            || maxWidth\n            || maxHeight\n            || minWidth\n            || minHeight\n        )\n        {\n            this.fitToSize(this.parentWidth, this.parentHeight);\n        }\n\n        this.fitInnerText(finalWidth, finalHeight);\n\n        if (this._width === 0 || this._height === 0)\n        {\n            this.layout.container.visible = false;\n\n            return;\n        }\n\n        this.updateBG(finalWidth, finalHeight);\n        this.updateMask();\n\n        this.layout.align.resize(this.parentWidth, this.parentHeight);\n    }\n\n    /**\n     * Render and update the background of layout basing on it's current state.\n     * @param finalWidth - Width of the layout.\n     * @param finalHeight - Height of the layout.\n     */\n    protected updateBG(finalWidth: number, finalHeight: number)\n    {\n        const { background } = this.layout.style;\n\n        if (\n            background instanceof NineSliceSprite\n            || background instanceof TilingSprite\n            || background instanceof Sprite\n            || background instanceof Container\n        )\n        {\n            if (background instanceof Sprite)\n            {\n                background.anchor.set(0.5);\n                background.position.set(finalWidth / 2, finalHeight / 2);\n            }\n\n            if (!this.bg)\n            {\n                this.bg = background;\n\n                this.layout.container.addChildAt(this.bg, 0);\n            }\n\n            switch (this.layout.style.backgroundSize)\n            {\n                case 'contain':\n                    background.scale.set(\n                        Math.min(\n                            finalWidth / background.width,\n                            finalHeight / background.height\n                        )\n                    );\n                    break;\n                case 'cover':\n                    background.scale.set(\n                        Math.max(\n                            finalWidth / background.width,\n                            finalHeight / background.height\n                        )\n                    );\n                    break;\n                case 'stretch':\n                    background.width = finalWidth;\n                    background.height = finalHeight;\n                    break;\n            }\n        }\n        else\n        {\n            const color = background !== 'transparent' && background;\n\n            const { borderRadius } = this.layout.style;\n            const { width, height } = this;\n\n            if (color && width && height)\n            {\n                if (!this.bg)\n                {\n                    this.bg = new Graphics();\n                    this.layout.container.addChildAt(this.bg, 0);\n                }\n\n                let x = 0;\n                let y = 0;\n\n                const { anchorX, anchorY } = this.layout.style;\n\n                if (anchorX !== undefined)\n                {\n                    x -= width * anchorX;\n                }\n\n                if (anchorY !== undefined)\n                {\n                    y -= height * anchorY;\n                }\n\n                if (this.bg instanceof Graphics)\n                {\n                    this.bg\n                        .clear()\n                        .roundRect(x, y, width, height, borderRadius)\n                        .fill(color);\n                }\n            }\n            else if (this.bg)\n            {\n                this.layout.container.removeChild(this.bg);\n                delete this.bg;\n            }\n        }\n    }\n\n    /** Render and update the mask of layout basing on it's current state. Mask is used to hide overflowing content. */\n    protected updateMask()\n    {\n        const { overflow, borderRadius } = this.layout.style;\n        const { width, height } = this;\n\n        if (overflow === 'hidden' && width && height)\n        {\n            if (!this.overflowMask)\n            {\n                this.overflowMask = new Graphics();\n                this.layout.container.addChild(this.overflowMask);\n            }\n\n            let x = 0;\n            let y = 0;\n\n            const { anchorX, anchorY } = this.layout.style;\n\n            if (anchorX !== undefined)\n            {\n                x -= width * anchorX;\n            }\n\n            if (anchorY !== undefined)\n            {\n                y -= height * anchorY;\n            }\n\n            this.overflowMask\n                .clear()\n                .roundRect(x, y, width, height, borderRadius)\n                .fill(0xffffff);\n\n            this.layout.container.mask = this.overflowMask;\n        }\n        else\n        {\n            this.layout.container.mask = null;\n            delete this.overflowMask;\n        }\n    }\n\n    protected fitInnerText(width: number, height: number)\n    {\n        if (!isItJustAText(this.layout))\n        {\n            return;\n        }\n\n        const { paddingLeft, paddingRight, paddingTop, paddingBottom }\n            = this.layout.style;\n\n        if (this.innerText.style.wordWrap)\n        {\n            const scale = this.layout.container?.scale.x ?? 1;\n\n            this.innerText.style.wordWrapWidth\n                = (width - paddingLeft - paddingRight) * scale;\n        }\n        else\n        {\n            this.innerText.scale.set(1);\n\n            const textWidth = this.innerText.width + paddingLeft + paddingRight;\n            const textHeight\n                = this.innerText.height + paddingTop + paddingBottom;\n\n            const horOverflow = textWidth > width;\n            const verOverflow = textHeight > height;\n\n            const horScale = width / (textWidth + paddingLeft + paddingRight);\n            const vertScale\n                = height / (textHeight + paddingBottom + paddingTop);\n\n            if (horOverflow || verOverflow)\n            {\n                this.innerText.scale.set(Math.min(horScale, vertScale));\n            }\n        }\n    }\n\n    /**\n     * Get type of size control basing on styles and in case if width of the layout is set to `auto`.\n     * @param size - Width or height of the layout.\n     */\n    protected getAutoSizeModificator(size: FlexNumber | 'auto'): SizeControl\n    {\n        const { background, display } = this.layout.style;\n\n        if (size !== 'auto')\n        {\n            return 'static';\n        }\n\n        if (display === 'block')\n        {\n            return 'parentSize';\n        }\n\n        if (\n            background instanceof Container\n            && background.width\n            && background.height\n        )\n        {\n            return 'background';\n        }\n\n        if (isItJustAText(this.layout) && this.layout.style.wordWrap)\n        {\n            return 'innerText';\n        }\n\n        if (size === 'auto')\n        {\n            return 'contentSize';\n        }\n\n        return 'static';\n    }\n\n    /**\n     * Get text element if layout is just a wrapper for a text element.\n     * @returns {Text} - Pixi Text element.\n     */\n    protected get innerText(): Text\n    {\n        if (!isItJustAText(this.layout))\n        {\n            return null;\n        }\n\n        const { firstChild } = this.layout.content;\n\n        return firstChild as Text;\n    }\n\n    /** Get width of the controlled layout. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * Set width of the controlled layout. And align children.\n     * @param {FlexNumber} width - Width to set.\n     */\n    set width(width: FlexNumber)\n    {\n        this._width = getNumber(width, this.parentWidth);\n        this.layout.align.resize(this.parentWidth, this.parentHeight);\n    }\n\n    /** Get height of the controlled layout. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Set height of the controlled layout. And align children.\n     * @param {FlexNumber} height - Height to set.\n     */\n    set height(height: FlexNumber)\n    {\n        this._height = getNumber(height, this.parentHeight);\n        this.layout.align.resize(this.parentWidth, this.parentHeight);\n    }\n\n    /**\n     * Fits controlled layout into parent size, scales it down if does not fit.\n     *\n     * This method is called when maxWidth or maxHeight is set.\n     * @param parentWidth\n     * @param parentHeight\n     */\n    protected fitToSize(parentWidth: number, parentHeight: number)\n    {\n        const { maxWidth, maxHeight, minWidth, minHeight, aspectRatio }\n            = this.layout.style;\n        const { marginLeft, marginRight, marginBottom, marginTop }\n            = this.layout.style;\n\n        const currentScaleX = this.layout.container.scale.x;\n        const currentScaleY = this.layout.container.scale.y;\n\n        const layoutWidth = this.layout.width + marginLeft + marginRight;\n        const layoutHeight = this.layout.height + marginTop + marginBottom;\n\n        const maxWidthVal = getNumber(maxWidth, parentWidth);\n        const maxHeightVal = getNumber(maxHeight, parentHeight);\n\n        const minWidthVal = getNumber(minWidth, parentWidth);\n        const minHeightVal = getNumber(minHeight, parentHeight);\n\n        if (aspectRatio === 'flex')\n        {\n            if (maxWidthVal && this.width > maxWidthVal)\n            {\n                this.width = maxWidthVal;\n            }\n\n            if (maxHeightVal && this.height > maxHeightVal)\n            {\n                this.height = maxHeightVal;\n            }\n\n            let minWidthScale: number;\n            let minHeightScale: number;\n\n            if (minWidthVal && this.width < minWidthVal)\n            {\n                minWidthScale = this.width / minWidthVal;\n                this.width = minWidthVal;\n            }\n\n            if (minHeightVal && this.height < minHeightVal)\n            {\n                minHeightScale = this.height / minHeightVal;\n                this.height = minHeightVal;\n            }\n\n            if (minWidthScale || minHeightScale)\n            {\n                const scale\n                    = minWidthScale && minHeightScale\n                        ? Math.min(minWidthScale, minHeightScale)\n                        : minWidthScale ?? minHeightScale;\n\n                this.layout.container.scale.set(scale);\n            }\n\n            return;\n        }\n\n        const maxFitScaleX = maxWidthVal / layoutWidth;\n        const maxFitScaleY = maxHeightVal / layoutHeight;\n\n        const minFitScaleX = minWidthVal / layoutWidth;\n        const minFitScaleY = minHeightVal / layoutHeight;\n\n        let finalScaleX = currentScaleX;\n        let finalScaleY = currentScaleY;\n\n        if (layoutWidth * currentScaleX > maxWidthVal)\n        {\n            finalScaleX = maxFitScaleX;\n        }\n\n        if (layoutHeight * currentScaleY > maxHeightVal)\n        {\n            finalScaleY = maxFitScaleY;\n        }\n\n        let finalScaleToFit = Math.min(finalScaleX, finalScaleY);\n\n        if (minWidth || minHeight)\n        {\n            if (minWidth && minHeight)\n            {\n                finalScaleToFit = Math.max(minFitScaleX, minFitScaleY);\n            }\n            else if (minWidth)\n            {\n                finalScaleToFit = finalScaleX;\n            }\n            else if (minHeight)\n            {\n                finalScaleToFit = minFitScaleY;\n            }\n        }\n\n        this.layout.container.scale.set(finalScaleToFit);\n    }\n}\n","import { TextStyleAlign } from 'pixi.js';\n\nexport const CSS_COLOR_NAMES = {\n    white: 0xffffff,\n    red: 0xff0000,\n    green: 0x008000,\n    blue: 0x0000ff,\n    gray: 0x808080,\n    yellow: 0xffff00,\n    gold: 0xffd700,\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    blanchedalmond: 0xffebcd,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    goldenrod: 0xdaa520,\n    greenyellow: 0xadff2f,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    whitesmoke: 0xf5f5f5,\n    yellowgreen: 0x9acd32,\n    black: 0x000000,\n};\n\nexport const LOREM_TEXT = `Lorem ipsum dolor, sit amet consectetur adipisicing elit.\n\nAb praesentium velit minima unde beatae. Illo earum, rem iure unde nemo,\n\nexercitationem nesciunt et voluptas nisi adipisci, provident cupiditate veritatis magnam?`;\n\nexport const DISPLAY = ['block', 'inline-block', 'inline'];\n\nexport const OVERFLOW = ['visible', 'hidden'];\n\nexport const POSITION = [\n    'center',\n\n    'left',\n    'right',\n    'top',\n    'bottom',\n\n    'leftTop',\n    'rightTop',\n    'leftBottom',\n    'rightBottom',\n\n    'topLeft',\n    'topRight',\n    'bottomLeft',\n    'bottomRight',\n\n    'centerTop',\n    'centerBottom',\n    'centerLeft',\n    'centerRight',\n\n    'topCenter',\n    'bottomCenter',\n    'leftCenter',\n    'rightCenter',\n];\n\nexport const ALIGN: TextStyleAlign[] = ['center', 'left', 'right', 'justify'];\nexport const VERTICAL_ALIGN = ['middle', 'top', 'bottom'];\n\nexport const BACKGROUND_SIZE = ['auto', 'contain', 'cover', 'stretch'];\n","import { NineSliceSprite, TilingSprite } from 'pixi.js';\nimport { LayoutSystem } from '../Layout';\nimport { BACKGROUND_SIZE, OVERFLOW, VERTICAL_ALIGN } from '../utils/constants';\nimport { stylesToPixiTextStyles } from '../utils/helpers';\nimport { PixiTextStyle } from '../utils/text';\n\nimport type { ConditionalStyles, GradeToOne, Styles } from '../utils/types';\n\n/** Style controller manages {@link LayoutSystem} styles. */\nexport class StyleController\n{\n    protected layout: LayoutSystem;\n\n    protected styles: Styles = {};\n\n    /** Holds all text related styles. This is to be nested by children */\n    protected _textStyle: Partial<PixiTextStyle> = {}; // this is to be nested by children\n\n    /** Stores default styles. */\n    protected defaultStyles: Styles;\n\n    /** Conditional styles */\n    protected conditionalStyles: ConditionalStyles = {};\n\n    /**\n     * Manages and sets all the styles of {@link LayoutSystem}\n     * @param layout - {@link LayoutSystem} to be styled\n     * @param styles - styles to be applied\n     */\n    constructor(layout: LayoutSystem, styles?: Styles)\n    {\n        this.layout = layout;\n        this.set(styles);\n    }\n\n    /**\n     * Applies a list of styles for the layout.\n     * @param { Styles } styles - styles to be applied\n     */\n    set(styles?: Styles & ConditionalStyles)\n    {\n        this.styles.overflow\n            = styles?.overflow ?? this.styles.overflow ?? OVERFLOW[0];\n        this.styles.display\n            = styles?.display ?? this.styles.display ?? 'inline-block';\n        this.styles.borderRadius\n            = styles?.borderRadius ?? this.styles.borderRadius ?? 0;\n\n        this.styles.zIndex = styles?.zIndex ?? this.styles.zIndex ?? 1;\n\n        this.opacity = styles?.opacity ?? this.styles.opacity ?? 1;\n\n        this.styles.maxWidth = styles?.maxWidth ?? this.styles.maxWidth;\n        this.styles.maxHeight = styles?.maxHeight ?? this.styles.maxHeight;\n\n        this.styles.minWidth = styles?.minWidth ?? this.styles.minWidth;\n        this.styles.minHeight = styles?.minHeight ?? this.styles.minHeight;\n\n        this.styles.padding = styles?.padding ?? this.styles.padding ?? 0;\n        this.styles.paddingTop\n            = styles?.paddingTop\n            ?? styles?.padding\n            ?? this.styles.paddingTop\n            ?? 0;\n        this.styles.paddingRight\n            = styles?.paddingRight\n            ?? styles?.padding\n            ?? this.styles.paddingRight\n            ?? 0;\n        this.styles.paddingBottom\n            = styles?.paddingBottom\n            ?? styles?.padding\n            ?? this.styles.paddingBottom\n            ?? 0;\n        this.styles.paddingLeft\n            = styles?.paddingLeft\n            ?? styles?.padding\n            ?? this.styles.paddingLeft\n            ?? 0;\n\n        this.styles.margin = styles?.margin ?? this.styles.margin ?? 0;\n        this.styles.marginTop\n            = styles?.marginTop ?? styles?.margin ?? this.styles.marginTop ?? 0;\n        this.styles.marginRight\n            = styles?.marginRight\n            ?? styles?.margin\n            ?? this.styles.marginRight\n            ?? 0;\n        this.styles.marginBottom\n            = styles?.marginBottom\n            ?? styles?.margin\n            ?? this.styles.marginBottom\n            ?? 0;\n        this.styles.marginLeft\n            = styles?.marginLeft ?? styles?.margin ?? this.styles.marginLeft ?? 0;\n\n        this.styles.scale = styles?.scale ?? this.styles.scale ?? 1;\n        this.styles.scaleX\n            = styles?.scaleX ?? styles?.scale ?? this.styles.scaleX ?? 1;\n        this.styles.scaleY\n            = styles?.scaleY ?? styles?.scale ?? this.styles.scaleY ?? 1;\n\n        this.styles.width = styles?.width ?? this.styles.width ?? 'auto';\n        this.styles.height = styles?.height ?? this.styles.height ?? 'auto';\n\n        this.styles.wordWrap = styles?.wordWrap ?? false;\n\n        if (styles?.anchorX !== undefined)\n        {\n            this.styles.anchorX = styles.anchorX;\n        }\n        else if (styles?.anchor !== undefined)\n        {\n            if (typeof styles.anchor === 'number')\n            {\n                this.styles.anchorX = styles.anchor;\n            }\n            else if (Array.isArray(styles.anchor))\n            {\n                this.styles.anchorX = styles.anchor[0];\n            }\n        }\n\n        if (styles?.anchorY !== undefined)\n        {\n            this.styles.anchorY = styles.anchorY;\n        }\n        else if (styles?.anchor !== undefined)\n        {\n            if (typeof styles.anchor === 'number')\n            {\n                this.styles.anchorY = styles.anchor;\n            }\n            else if (\n                Array.isArray(styles.anchor)\n                && styles.anchor[1] !== undefined\n            )\n            {\n                this.styles.anchorY = styles.anchor[1];\n            }\n        }\n\n        this.styles.background\n            = styles?.background\n            ?? styles?.backgroundColor\n            ?? this.styles.background;\n\n        this.styles.backgroundSize\n            = styles?.backgroundSize\n            ?? this.styles.backgroundSize\n            ?? BACKGROUND_SIZE[0];\n\n        if (\n            this.styles.background instanceof NineSliceSprite\n            || this.styles.background instanceof TilingSprite\n        )\n        {\n            this.styles.backgroundSize = 'stretch';\n        }\n\n        this.styles.textAlign = styles?.textAlign ?? this.styles.textAlign;\n        this.styles.position = styles?.position ?? this.styles.position;\n        this.styles.verticalAlign\n            = styles?.verticalAlign\n            ?? this.styles.verticalAlign\n            ?? VERTICAL_ALIGN[0];\n\n        this.styles.aspectRatio\n            = styles?.aspectRatio ?? this.styles.aspectRatio ?? 'static';\n\n        this.styles.visible = styles?.visible ?? this.styles.visible ?? true;\n        this.visible = this.styles.visible;\n\n        this._textStyle = stylesToPixiTextStyles(styles);\n\n        if (styles)\n        {\n            this.separateConditionalStyles(styles);\n        }\n    }\n\n    /**\n     * Returns a style value by name.\n     * @param style - name of the style\n     */\n    get(style: keyof Styles): Styles[keyof Styles]\n    {\n        return this.styles[style];\n    }\n\n    /** Returns all styles of the Layout */\n    getAll(): Styles\n    {\n        return this.styles;\n    }\n\n    /** Returns all pixi text related styles of the Layout */\n    get textStyle(): Partial<PixiTextStyle>\n    {\n        return this._textStyle;\n    }\n\n    /** Sets the opacity of the layout */\n    set opacity(value: GradeToOne)\n    {\n        this.styles.opacity = value;\n        this.layout.container.alpha = value;\n    }\n\n    /** Returns the opacity of the layout */\n    get opacity(): GradeToOne\n    {\n        return this.styles.opacity;\n    }\n\n    /** Set visibility of the layout */\n    set visible(value: boolean)\n    {\n        this.layout.container.visible = value;\n    }\n\n    /** Returns visibility of the layout */\n    get visible(): boolean\n    {\n        return this.layout.container.visible;\n    }\n\n    /** Checks and applies conditional styles basing on parent size */\n    applyConditionalStyles()\n    {\n        if (!this.hasConditionalStyles) return;\n\n        this.set({\n            ...this.defaultStyles,\n            ...(this.layout.isRootLayoutPortrait\n                ? this.conditionalStyles.portrait\n                : this.conditionalStyles.landscape),\n        });\n    }\n\n    /**\n     * Separates conditional styles from default styles\n     * @param styles - mixed styles\n     */\n    protected separateConditionalStyles(styles?: Styles & ConditionalStyles)\n    {\n        if (!styles.portrait && !styles.landscape)\n        {\n            this.defaultStyles = {\n                ...styles,\n            };\n\n            return;\n        }\n\n        if (styles.portrait)\n        {\n            this.conditionalStyles.portrait = {\n                ...this.conditionalStyles.portrait,\n                ...styles.portrait,\n            };\n        }\n\n        if (styles.landscape)\n        {\n            this.conditionalStyles.landscape = {\n                ...this.conditionalStyles.landscape,\n                ...styles.landscape,\n            };\n        }\n\n        delete styles.portrait;\n        delete styles.landscape;\n\n        this.defaultStyles = styles;\n    }\n\n    /** Returns true if there are conditional styles */\n    get hasConditionalStyles(): boolean\n    {\n        return Object.keys(this.conditionalStyles).length > 0;\n    }\n}\n","import { Container } from 'pixi.js';\nimport { AlignController } from './controllers/AlignController';\nimport { ContentController } from './controllers/ContentController';\nimport { SizeController } from './controllers/SizeController';\nimport { StyleController } from './controllers/StyleController';\nimport { PixiTextStyle } from './utils/text';\nimport { ConditionalStyles, Content, LayoutOptions, Styles } from './utils/types';\n\n/**\n * Layout controller class for any PixiJS Container based instance.\n *\n * To be be used for automatic align and resize children tree,\n * where every child behavior can be configured using css like configurations.\n *\n * Also it adds a list of css-like properties for styling like background style or text style,\n * check {@link SizeController} class.\n *\n * Any PixiJS Container based instance can be turned into a layout by calling {@link Layout#initLayout} method.\n * @example\n * const container = new Container().initLayout();\n *\n * container.layout?.setStyles({\n *      background: 'black',\n *      width: '100%',\n *      height: '100%',\n *      padding: 10,\n *      overflow: 'hidden',\n *      color: 'white',\n * }); // set styles\n *\n * container.layout?.setContent({\n *      text: 'Hello World',\n * }); // set content\n *\n * Or alternatively:\n *\n * const layoutSystem = new LayoutSystem({\n *      id: 'root',\n *      content: 'Hello World',\n *      styles: {\n *          background: 'black',\n *      }\n * }); // create layout system\n *\n * app.stage.addChild(layoutSystem.container); // add layout system generated container to the stage\n */\nexport class LayoutSystem\n{\n    /** Container for all layout children. */\n    container: Container;\n\n    /** ID of layout, can be used to set styles in the globalStyles object somewhere higher in hierarchal tree. */\n    id: string;\n\n    /** {@link SizeController} is a class for controlling layout and all it's children sizes. */\n    size: SizeController;\n\n    /** {@link AlignController} is a class for controlling layout and all it's children alignment. */\n    align: AlignController;\n\n    /** {@link StyleController} is a class for controlling styles. */\n    protected _style: StyleController;\n\n    /** {@link ContentController} controller is a class for controlling layouts children. */\n    content: ContentController;\n\n    /** Stores isPortrait state */\n    isPortrait: boolean;\n\n    /**\n     * Creates layout system instance.\n     * @param options - Layout options\n     * @param options.id - ID of the layout.\n     * @param options.styles - Styles of the layout. List of available styles can be found in {@link StyleController}.\n     * @param options.content - Content of the layout.\n     * @param options.globalStyles - Global styles for layout and it's children.\n     * @param container - Container for all layout children, will be created if not provided.\n     */\n    constructor(options?: LayoutOptions, container?: Container)\n    {\n        this.container = container || new Container();\n\n        this.id = options?.id;\n\n        if (options?.globalStyles)\n        {\n            // check if there is a global style for this layout\n            const styles = options.globalStyles[this.id];\n\n            if (styles && options.styles)\n            {\n                options.styles = { ...styles, ...options.styles };\n            }\n            else if (styles)\n            {\n                options.styles = styles;\n            }\n        }\n\n        // order here is important as controllers are dependent on each other\n        this.size = new SizeController(this);\n        this._style = new StyleController(this, options?.styles);\n        this.align = new AlignController(this);\n        this.content = new ContentController(\n            this,\n            options?.content,\n            options?.globalStyles\n        );\n    }\n\n    /**\n     * Resize method should be called on every parent size change.\n     * @param parentWidth\n     * @param parentHeight\n     */\n    resize(parentWidth?: number, parentHeight?: number)\n    {\n        const width = parentWidth || this.contentWidth || this.size.parentWidth;\n        const height\n            = parentHeight || this.contentHeight || this.size.parentHeight;\n\n        this.isPortrait = width < height;\n\n        this._style.applyConditionalStyles();\n        this.size.resize(parentWidth, parentHeight);\n    }\n\n    /** Recalculate positions and sizes of layouts three. */\n    refresh()\n    {\n        this.resize(this.size.parentWidth, this.size.parentHeight);\n    }\n\n    /** Returns with of the container */\n    get contentWidth(): number | undefined\n    {\n        if (!this.container?.parent)\n        {\n            return undefined;\n        }\n\n        return this.container.parent.width;\n    }\n\n    /** Returns height of the container */\n    get contentHeight(): number | undefined\n    {\n        if (!this.container?.parent)\n        {\n            return undefined;\n        }\n\n        return this.container.parent.height;\n    }\n\n    /** Sets the width of layout.  */\n    set width(value: number)\n    {\n        this.size.width = value;\n    }\n\n    /** Gets the width of layout. */\n    get width()\n    {\n        return this.size.width;\n    }\n\n    /** Sets the height of layout. */\n    set height(value: number)\n    {\n        this.size.height = value;\n    }\n\n    /** Gets the height of layout. */\n    get height()\n    {\n        return this.size.height;\n    }\n\n    /**\n     * Adds content to the layout and reposition/resize other elements and the layout basing on styles.\n     * @param {Content} content - Content to be added. Can be string, Container, Layout, LayoutOptions or array of those.\n     * Also content can be an object with inner layout ids as a keys, and Content as values.\n     */\n    addContent(content: Content)\n    {\n        this.content.createContent(content);\n        this.updateParents();\n    }\n\n    /**\n     * Removes content of the layout by its id and reposition/resize other elements and the layout basing on styles.\n     * @param {string} id - id of the content to be removed.\n     */\n    removeChildByID(id: string)\n    {\n        this.content.removeContent(id);\n    }\n\n    /**\n     * Get element from the layout child tree by it's ID\n     * @param {string} id - id of the content to be foundS.\n     */\n    getChildByID(id: string): Layout | Container | undefined\n    {\n        return this.content.getByID(id);\n    }\n\n    /**\n     * This is used in case if layout or some of it's children was changed\n     * and we need to update sizes and positions for all the parents tree.\n     */\n    updateParents()\n    {\n        const rootLayout = this.getRootLayout();\n\n        rootLayout.size.resize();\n    }\n\n    /** Returns root layout of the layout tree. */\n    getRootLayout(): LayoutSystem\n    {\n        if (this.container.parent?.layout)\n        {\n            return this.container.parent.layout.getRootLayout();\n        }\n\n        return this;\n    }\n\n    /**\n     * Updates the layout styles and resize/reposition it and its children basing on new styles.\n     * @param styles\n     */\n    setStyles(styles: Styles & ConditionalStyles)\n    {\n        this._style.set(styles);\n        this.updateParents();\n    }\n\n    /** Layout text styles. */\n    get textStyle(): Partial<PixiTextStyle>\n    {\n        return this._style.textStyle;\n    }\n\n    /** Layout styles. */\n    get style(): Styles\n    {\n        return this._style.getAll();\n    }\n\n    /** Returns true if root layout is in landscape mode. */\n    get isRootLayoutPortrait(): boolean\n    {\n        return this.getRootLayout().isPortrait === true;\n    }\n}\n\n/**\n * Container with layout system initiated.\n * @example\n *\n * const layout = new Layout({\n * \tstyles: {\n * \t\twidth: 100,\n * \t\theight: 100,\n * \t\tbackground: 'red',\n * \t},\n * \tcontent: [\n * \t\t'Hello world',\n * \t\t{\n * \t\t\tid: 'innerLayout1',\n * \t\t\ttext: 'Inner layout 1',\n * \t\t},\n * \t\t{\n * \t\t\tid: 'innerLayout2',\n * \t\t\ttext: 'Inner layout 2',\n * \t\t},\n * \t],\n * \tglobalStyles: {\n * \t\tinnerLayout1: {\n * \t\t\twidth: 200,\n * \t\t\theight: 200,\n * \t\t},\n * \t\tinnerLayout1: {\n * \t\t\twidth: 200,\n * \t\t\theight: 200,\n * \t\t},\n * \t},\n * });\n */\nexport class Layout extends Container\n{\n    override layout: LayoutSystem;\n\n    /**\n     * Creates layout container.\n     * @param options\n     */\n    constructor(options?: LayoutOptions)\n    {\n        super();\n\n        this.layout = new LayoutSystem(options, this);\n    }\n\n    /** Get {@link SizeController} */\n    get size(): SizeController\n    {\n        return this.layout.size;\n    }\n\n    /** {@link AlignController} */\n    get align(): AlignController\n    {\n        return this.layout.align;\n    }\n\n    /** {@link ContentController} */\n    get content(): ContentController\n    {\n        return this.layout.content;\n    }\n\n    /** ID of layout, can be used to set styles in the globalStyles. */\n    get id()\n    {\n        return this.layout.id;\n    }\n\n    /** ID of layout, can be used to set styles in the globalStyles. */\n    set id(value: string)\n    {\n        this.layout.id = value;\n    }\n\n    /** Returns with of the layouts content. */\n    get contentWidth(): number | undefined\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.contentWidth;\n    }\n\n    /** Returns height of the layouts content. */\n    get contentHeight(): number | undefined\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.contentHeight;\n    }\n\n    /** Set the width of layout.  */\n    override set width(value: number)\n    {\n        if (!this.layout) {\n            return;\n        }\n        this.layout.width = value;\n    }\n\n    /** Get the width of layout. */\n    override get width()\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.width;\n    }\n\n    /** Set the height of layout. */\n    override set height(value: number)\n    {\n        if (!this.layout) {\n            return;\n        }\n        this.layout.height = value;\n    }\n\n    /** Get the height of layout. */\n    override get height()\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.height;\n    }\n\n    /**\n     * Add content to the layout system and reposition/resize elements basing on styles.\n     * @param {Content} content - Content to be added. Can be string, Container, Layout, LayoutOptions or array of those.\n     * Also content can be an object where keys are ids of child layouts to create, and Content as values.\n     */\n    addContent(content: Content)\n    {\n        this.layout.addContent(content);\n    }\n\n    /**\n     * Remove content from layout system by its id and reposition/resize elements basing on styles.\n     * @param {string} id - id of the content to be removed.\n     */\n    removeChildByID(id: string)\n    {\n        this.layout.removeChildByID(id);\n    }\n\n    /**\n     * Get element from the layout system children tree by it's ID\n     * @param {string} id - id of the content to be foundS.\n     */\n    getChildByID(id: string): Layout | Container | undefined\n    {\n        return this.layout.getChildByID(id);\n    }\n\n    /**\n     * Updates the layout styles and resize/reposition elements basing on new styles.\n     * @param styles\n     */\n    setStyles(styles: Styles)\n    {\n        this.layout.setStyles(styles);\n    }\n\n    /** Layout text styles. */\n    get textStyle(): Partial<PixiTextStyle>\n    {\n        return this.layout.textStyle;\n    }\n\n    /** Layout styles. */\n    get style(): Styles\n    {\n        return this.layout.style;\n    }\n\n    /**\n     * Resize method should be called on every parent size change.\n     * @param parentWidth\n     * @param parentHeight\n     */\n    resize(parentWidth?: number, parentHeight?: number)\n    {\n        this.layout.resize(parentWidth, parentHeight);\n    }\n\n    /** Recalculate positions and sizes of layouts three. */\n    refresh()\n    {\n        this.resize(this.size.parentWidth, this.size.parentHeight);\n    }\n}\n\ndeclare module 'pixi.js'\n{\n    interface Container\n    {\n        initLayout(config?: LayoutOptions): Container;\n        layout?: LayoutSystem;\n        isPixiLayout?: boolean;\n    }\n}\n\nif (!Container.prototype.initLayout)\n{\n    Object.defineProperty(Container.prototype, 'initLayout', {\n        value(options?: LayoutOptions): void\n        {\n            if (!this.layout)\n            {\n                this.layout = new LayoutSystem(options, this);\n                this.isPixiLayout = true;\n            }\n\n            return this;\n        },\n    });\n}\n","import { Text } from 'pixi.js';\nimport { Layout, LayoutSystem } from '../Layout';\nimport { isItJustAText } from '../utils/helpers';\n\n/** Align controller manages {@link LayoutSystem} and it's content alignment. */\nexport class AlignController\n{\n    protected layout: LayoutSystem;\n\n    /**\n     * Creates align controller.\n     * @param {LayoutSystem} layout - Layout to control.\n     */\n    constructor(layout: LayoutSystem)\n    {\n        this.layout = layout;\n    }\n\n    /**\n     * Updates layout and all children alignments.\n     * @param {number} parentWidth\n     * @param {number} parentHeight\n     */\n    resize(parentWidth: number, parentHeight: number)\n    {\n        this.setSelfPosition(parentWidth, parentHeight);\n\n        this.layout.content.resize(this.layout.width, this.layout.height);\n\n        // !!! important to align children AFTER content resize\n        this.alignChildren(this.layout.width, this.layout.height);\n    }\n\n    protected alignChildren(parentWidth: number, parentHeight: number)\n    {\n        let maxChildHeight = 0;\n\n        const { style } = this.layout;\n\n        const paddingTop = style.paddingTop ?? 0;\n        const paddingRight = style.paddingRight ?? 0;\n        const paddingBottom = style.paddingBottom ?? 0;\n        const paddingLeft = style.paddingLeft ?? 0;\n\n        let x = paddingLeft;\n        let y = paddingTop;\n\n        const children = this.layout.content.children;\n\n        children.forEach((child) =>\n        {\n            if (!child.height && !child.width) return;\n\n            if (child instanceof Text && isItJustAText(this.layout))\n            {\n                const availableWidth = parentWidth - paddingLeft - paddingRight;\n\n                const align = style.textAlign;\n\n                if (child.width < availableWidth)\n                {\n                    if (align === 'center')\n                    {\n                        child.anchor.x = 0.5;\n                        child.x = parentWidth / 2;\n                    }\n                    else if (align === 'right')\n                    {\n                        child.anchor.x = 1;\n                        child.x = parentWidth - paddingRight;\n                    }\n                    else\n                    {\n                        child.anchor.x = 0;\n                        child.x = paddingLeft;\n                    }\n                }\n                else\n                {\n                    child.anchor.x = 0;\n                    child.x = paddingLeft;\n                }\n\n                const verticalAlign = style.verticalAlign;\n\n                const availableHeight\n                    = parentHeight - paddingTop - paddingBottom;\n\n                if (child.height < availableHeight)\n                {\n                    if (verticalAlign === 'middle')\n                    {\n                        child.anchor.y = 0.5;\n                        child.y = parentHeight / 2;\n                    }\n                    else if (verticalAlign === 'bottom')\n                    {\n                        child.anchor.y = 1;\n                        child.y = parentHeight - paddingBottom;\n                    }\n                    else\n                    {\n                        child.anchor.y = 0;\n                        child.y = paddingTop;\n                    }\n                }\n                else\n                {\n                    child.anchor.y = 0;\n                    child.y = paddingTop;\n                }\n\n                return;\n            }\n\n            let childDisplay = 'inline-block';\n            let childMarginLeft = 0;\n            let childMarginRight = 0;\n            let childMarginTop = 0;\n            let childMarginBottom = 0;\n\n            if (child.isPixiLayout || child instanceof Layout)\n            {\n                const childLayout = child.layout as LayoutSystem;\n\n                childDisplay = childLayout.style.display;\n                childMarginLeft = childLayout.style.marginLeft;\n                childMarginRight = childLayout.style.marginRight;\n                childMarginTop = childLayout.style.marginTop;\n                childMarginBottom = childLayout.style.marginBottom;\n\n                if (childLayout.style.position !== undefined)\n                {\n                    // this layout position will be handled by it's own controller\n                    return;\n                }\n            }\n\n            let anchorX = 0;\n            let anchorY = 0;\n\n            if (style.position === undefined)\n            {\n                // if position is set, anchor will be handled in setSelfPosition method\n                anchorX\n                    = style.anchorX !== undefined\n                        ? style.anchorX * this.layout.width\n                        : 0;\n                anchorY\n                    = style.anchorY !== undefined\n                        ? style.anchorY * this.layout.height\n                        : 0;\n            }\n\n            child.x = x + childMarginLeft - anchorX;\n            child.y = y + childMarginTop - anchorY;\n\n            if (\n                child.height + childMarginTop + childMarginBottom\n                > maxChildHeight\n            )\n            {\n                maxChildHeight\n                    = child.height + childMarginTop + childMarginBottom;\n            }\n\n            const availableWidth = parentWidth - paddingRight;\n\n            if (childDisplay === 'block' && child.width < availableWidth)\n            {\n                childDisplay = 'inline-block';\n            }\n\n            const isFeetParentWidth\n                = x + child.width + childMarginRight <= availableWidth;\n            const isFirstChild = child === this.layout.content.firstChild;\n\n            switch (childDisplay)\n            {\n                case 'inline':\n                case 'inline-block':\n                    if (!isFeetParentWidth && !isFirstChild)\n                    {\n                        x = paddingLeft + child.width + childMarginRight;\n                        y += maxChildHeight;\n\n                        child.x = paddingLeft + childMarginLeft;\n                        child.y = y + childMarginTop;\n                    }\n                    else\n                    {\n                        x += child.width + childMarginRight;\n                    }\n                    break;\n\n                default:\n                    y += child.height + childMarginBottom;\n                    break;\n            }\n        });\n    }\n\n    protected setSelfPosition(parentWidth: number, parentHeight: number)\n    {\n        const { position, marginRight, marginBottom, marginTop, marginLeft }\n            = this.layout.style || {};\n\n        const { style } = this.layout;\n\n        if (!position) return;\n\n        const scaleX = this.layout.container.scale.x;\n        const scaleY = this.layout.container.scale.y;\n        const width = this.layout.width * scaleX;\n        const height = this.layout.height * scaleY;\n\n        const anchorX = style.anchorX;\n        const anchorY = style.anchorY;\n\n        const finalPosition = {\n            x: 0,\n            y: 0,\n        };\n\n        switch (position)\n        {\n            case 'rightTop':\n            case 'topRight':\n            case 'right':\n                finalPosition.x\n                    = parentWidth - marginRight - (width * (anchorX ?? 1));\n                finalPosition.y = marginTop - (height * (anchorY ?? 0));\n                break;\n\n            case 'leftBottom':\n            case 'bottomLeft':\n            case 'bottom':\n                finalPosition.x = marginLeft - (width * (anchorX ?? 0));\n                finalPosition.y\n                    = parentHeight - marginBottom - (height * (anchorY ?? 1));\n                break;\n\n            case 'rightBottom':\n            case 'bottomRight':\n                finalPosition.x\n                    = parentWidth - marginRight - (width * (anchorX ?? 1));\n                finalPosition.y\n                    = parentHeight - marginBottom - (height * (anchorY ?? 1));\n                break;\n\n            case 'center':\n                finalPosition.x\n                    = (parentWidth / 2) - (width * (anchorX ?? 0.5)) + marginLeft;\n                finalPosition.y\n                    = (parentHeight / 2) - (height * (anchorY ?? 0.5)) + marginTop;\n                break;\n\n            case 'centerTop':\n            case 'topCenter':\n                finalPosition.x\n                    = (parentWidth / 2) - (width * (anchorX ?? 0.5)) + marginLeft;\n                finalPosition.y = marginTop - (height * (anchorY ?? 0));\n                break;\n\n            case 'centerBottom':\n            case 'bottomCenter':\n                finalPosition.x\n                    = (parentWidth / 2) - (width * (anchorX ?? 0.5)) + marginLeft;\n                finalPosition.y\n                    = parentHeight - marginBottom - (height * (anchorY ?? 1));\n                break;\n\n            case 'centerLeft':\n            case 'leftCenter':\n                finalPosition.x = marginLeft - (width * (anchorX ?? 0));\n                finalPosition.y\n                    = (parentHeight / 2) - (height * (anchorY ?? 0.5)) + marginTop;\n                break;\n\n            case 'centerRight':\n            case 'rightCenter':\n                finalPosition.x\n                    = parentWidth - marginRight - (width * (anchorX ?? 1));\n                finalPosition.y\n                    = (parentHeight / 2) - (height * (anchorY ?? 0.5)) + marginTop;\n                break;\n\n            case 'leftTop':\n            case 'topLeft':\n            case 'left':\n            case 'top':\n            default:\n                finalPosition.x = marginLeft - (width * (anchorX ?? 0));\n                finalPosition.y = marginTop - (height * (anchorY ?? 0));\n        }\n\n        this.layout.container.position.set(finalPosition.x, finalPosition.y);\n    }\n}\n"],"names":["rgba2Hex","r","g","b","getHex","n","hex","isDefined","value","getNumber","maxPercentValue","val","stylesToPixiTextStyles","styles","_a","_b","resultStyles","key","isItJustAText","layout","Text","I","P","S","k","v","D","l","o","L","C","ContentController","content","globalStyles","__publicField","child","parentGlobalStyles","contentType","customID","text","textInstance","styleKey","layoutConfig","__spreadValues","Layout","contentList","id","idKey","contentElement","defaultStyles","layoutInstance","__spreadProps","width","height","result","res","Sprite","Graphics","Container","registeredChild","childInstance","O","J","e","i","SizeController","parentWidth","parentHeight","_c","_d","_e","_f","_g","_h","_i","_j","finalWidth","finalHeight","maxWidth","maxHeight","minWidth","minHeight","scaleX","scaleY","background","paddingLeft","paddingRight","paddingTop","paddingBottom","aspectRatio","widthModificator","heightModificator","parentPaddingLeft","parentPaddingRight","paddings","availableSpaceHor","childrenWidth","firstChild","childrenHeight","NineSliceSprite","TilingSprite","color","borderRadius","x","y","anchorX","anchorY","overflow","scale","textWidth","textHeight","horOverflow","verOverflow","horScale","vertScale","size","display","marginLeft","marginRight","marginBottom","marginTop","currentScaleX","currentScaleY","layoutWidth","layoutHeight","maxWidthVal","maxHeightVal","minWidthVal","minHeightVal","minWidthScale","minHeightScale","maxFitScaleX","maxFitScaleY","minFitScaleX","minFitScaleY","finalScaleX","finalScaleY","finalScaleToFit","CSS_COLOR_NAMES","LOREM_TEXT","DISPLAY","OVERFLOW","POSITION","ALIGN","VERTICAL_ALIGN","BACKGROUND_SIZE","StyleController","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_A","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_R","_S","_T","_U","_V","_W","_X","_Y","_Z","__","_$","_aa","_ba","_ca","_da","_ea","_fa","_ga","_ha","_ia","_ja","_ka","_la","_ma","style","u","h","d","LayoutSystem","options","container","AlignController","z","F","c","s","maxChildHeight","availableWidth","align","verticalAlign","availableHeight","childDisplay","childMarginLeft","childMarginRight","childMarginTop","childMarginBottom","childLayout","isFeetParentWidth","isFirstChild","position","finalPosition"],"mappings":"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"}