{"version":3,"file":"AlignController.js","sources":["../../src/controllers/AlignController.ts"],"sourcesContent":["import { Text } from 'pixi.js';\nimport { Layout, LayoutSystem } from '../Layout';\nimport { isItJustAText } from '../utils/helpers';\n\n/** Align controller manages {@link LayoutSystem} and it's content alignment. */\nexport class AlignController\n{\n    protected layout: LayoutSystem;\n\n    /**\n     * Creates align controller.\n     * @param {LayoutSystem} layout - Layout to control.\n     */\n    constructor(layout: LayoutSystem)\n    {\n        this.layout = layout;\n    }\n\n    /**\n     * Updates layout and all children alignments.\n     * @param {number} parentWidth\n     * @param {number} parentHeight\n     */\n    resize(parentWidth: number, parentHeight: number)\n    {\n        this.setSelfPosition(parentWidth, parentHeight);\n\n        this.layout.content.resize(this.layout.width, this.layout.height);\n\n        // !!! important to align children AFTER content resize\n        this.alignChildren(this.layout.width, this.layout.height);\n    }\n\n    protected alignChildren(parentWidth: number, parentHeight: number)\n    {\n        let maxChildHeight = 0;\n\n        const { style } = this.layout;\n\n        const paddingTop = style.paddingTop ?? 0;\n        const paddingRight = style.paddingRight ?? 0;\n        const paddingBottom = style.paddingBottom ?? 0;\n        const paddingLeft = style.paddingLeft ?? 0;\n\n        let x = paddingLeft;\n        let y = paddingTop;\n\n        const children = this.layout.content.children;\n\n        children.forEach((child) =>\n        {\n            if (!child.height && !child.width) return;\n\n            if (child instanceof Text && isItJustAText(this.layout))\n            {\n                const availableWidth = parentWidth - paddingLeft - paddingRight;\n\n                const align = style.textAlign;\n\n                if (child.width < availableWidth)\n                {\n                    if (align === 'center')\n                    {\n                        child.anchor.x = 0.5;\n                        child.x = parentWidth / 2;\n                    }\n                    else if (align === 'right')\n                    {\n                        child.anchor.x = 1;\n                        child.x = parentWidth - paddingRight;\n                    }\n                    else\n                    {\n                        child.anchor.x = 0;\n                        child.x = paddingLeft;\n                    }\n                }\n                else\n                {\n                    child.anchor.x = 0;\n                    child.x = paddingLeft;\n                }\n\n                const verticalAlign = style.verticalAlign;\n\n                const availableHeight\n                    = parentHeight - paddingTop - paddingBottom;\n\n                if (child.height < availableHeight)\n                {\n                    if (verticalAlign === 'middle')\n                    {\n                        child.anchor.y = 0.5;\n                        child.y = parentHeight / 2;\n                    }\n                    else if (verticalAlign === 'bottom')\n                    {\n                        child.anchor.y = 1;\n                        child.y = parentHeight - paddingBottom;\n                    }\n                    else\n                    {\n                        child.anchor.y = 0;\n                        child.y = paddingTop;\n                    }\n                }\n                else\n                {\n                    child.anchor.y = 0;\n                    child.y = paddingTop;\n                }\n\n                return;\n            }\n\n            let childDisplay = 'inline-block';\n            let childMarginLeft = 0;\n            let childMarginRight = 0;\n            let childMarginTop = 0;\n            let childMarginBottom = 0;\n\n            if (child.isPixiLayout || child instanceof Layout)\n            {\n                const childLayout = child.layout as LayoutSystem;\n\n                childDisplay = childLayout.style.display;\n                childMarginLeft = childLayout.style.marginLeft;\n                childMarginRight = childLayout.style.marginRight;\n                childMarginTop = childLayout.style.marginTop;\n                childMarginBottom = childLayout.style.marginBottom;\n\n                if (childLayout.style.position !== undefined)\n                {\n                    // this layout position will be handled by it's own controller\n                    return;\n                }\n            }\n\n            let anchorX = 0;\n            let anchorY = 0;\n\n            if (style.position === undefined)\n            {\n                // if position is set, anchor will be handled in setSelfPosition method\n                anchorX\n                    = style.anchorX !== undefined\n                        ? style.anchorX * this.layout.width\n                        : 0;\n                anchorY\n                    = style.anchorY !== undefined\n                        ? style.anchorY * this.layout.height\n                        : 0;\n            }\n\n            child.x = x + childMarginLeft - anchorX;\n            child.y = y + childMarginTop - anchorY;\n\n            if (\n                child.height + childMarginTop + childMarginBottom\n                > maxChildHeight\n            )\n            {\n                maxChildHeight\n                    = child.height + childMarginTop + childMarginBottom;\n            }\n\n            const availableWidth = parentWidth - paddingRight;\n\n            if (childDisplay === 'block' && child.width < availableWidth)\n            {\n                childDisplay = 'inline-block';\n            }\n\n            const isFeetParentWidth\n                = x + child.width + childMarginRight <= availableWidth;\n            const isFirstChild = child === this.layout.content.firstChild;\n\n            switch (childDisplay)\n            {\n                case 'inline':\n                case 'inline-block':\n                    if (!isFeetParentWidth && !isFirstChild)\n                    {\n                        x = paddingLeft + child.width + childMarginRight;\n                        y += maxChildHeight;\n\n                        child.x = paddingLeft + childMarginLeft;\n                        child.y = y + childMarginTop;\n                    }\n                    else\n                    {\n                        x += child.width + childMarginRight;\n                    }\n                    break;\n\n                default:\n                    y += child.height + childMarginBottom;\n                    break;\n            }\n        });\n    }\n\n    protected setSelfPosition(parentWidth: number, parentHeight: number)\n    {\n        const { position, marginRight, marginBottom, marginTop, marginLeft }\n            = this.layout.style || {};\n\n        const { style } = this.layout;\n\n        if (!position) return;\n\n        const scaleX = this.layout.container.scale.x;\n        const scaleY = this.layout.container.scale.y;\n        const width = this.layout.width * scaleX;\n        const height = this.layout.height * scaleY;\n\n        const anchorX = style.anchorX;\n        const anchorY = style.anchorY;\n\n        const finalPosition = {\n            x: 0,\n            y: 0,\n        };\n\n        switch (position)\n        {\n            case 'rightTop':\n            case 'topRight':\n            case 'right':\n                finalPosition.x\n                    = parentWidth - marginRight - (width * (anchorX ?? 1));\n                finalPosition.y = marginTop - (height * (anchorY ?? 0));\n                break;\n\n            case 'leftBottom':\n            case 'bottomLeft':\n            case 'bottom':\n                finalPosition.x = marginLeft - (width * (anchorX ?? 0));\n                finalPosition.y\n                    = parentHeight - marginBottom - (height * (anchorY ?? 1));\n                break;\n\n            case 'rightBottom':\n            case 'bottomRight':\n                finalPosition.x\n                    = parentWidth - marginRight - (width * (anchorX ?? 1));\n                finalPosition.y\n                    = parentHeight - marginBottom - (height * (anchorY ?? 1));\n                break;\n\n            case 'center':\n                finalPosition.x\n                    = (parentWidth / 2) - (width * (anchorX ?? 0.5)) + marginLeft;\n                finalPosition.y\n                    = (parentHeight / 2) - (height * (anchorY ?? 0.5)) + marginTop;\n                break;\n\n            case 'centerTop':\n            case 'topCenter':\n                finalPosition.x\n                    = (parentWidth / 2) - (width * (anchorX ?? 0.5)) + marginLeft;\n                finalPosition.y = marginTop - (height * (anchorY ?? 0));\n                break;\n\n            case 'centerBottom':\n            case 'bottomCenter':\n                finalPosition.x\n                    = (parentWidth / 2) - (width * (anchorX ?? 0.5)) + marginLeft;\n                finalPosition.y\n                    = parentHeight - marginBottom - (height * (anchorY ?? 1));\n                break;\n\n            case 'centerLeft':\n            case 'leftCenter':\n                finalPosition.x = marginLeft - (width * (anchorX ?? 0));\n                finalPosition.y\n                    = (parentHeight / 2) - (height * (anchorY ?? 0.5)) + marginTop;\n                break;\n\n            case 'centerRight':\n            case 'rightCenter':\n                finalPosition.x\n                    = parentWidth - marginRight - (width * (anchorX ?? 1));\n                finalPosition.y\n                    = (parentHeight / 2) - (height * (anchorY ?? 0.5)) + marginTop;\n                break;\n\n            case 'leftTop':\n            case 'topLeft':\n            case 'left':\n            case 'top':\n            default:\n                finalPosition.x = marginLeft - (width * (anchorX ?? 0));\n                finalPosition.y = marginTop - (height * (anchorY ?? 0));\n        }\n\n        this.layout.container.position.set(finalPosition.x, finalPosition.y);\n    }\n}\n"],"names":["Text","isItJustAText","availableWidth","Layout"],"mappings":"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"}