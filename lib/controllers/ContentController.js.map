{"version":3,"file":"ContentController.js","sources":["../../src/controllers/ContentController.ts"],"sourcesContent":["/* eslint-disable no-case-declarations */\nimport { Container, Graphics, Sprite, Text } from 'pixi.js';\nimport { Layout, LayoutSystem } from '../Layout';\nimport { stylesToPixiTextStyles } from '../utils/helpers';\nimport { PixiTextStyle } from '../utils/text';\nimport {\n    Content,\n    ContentList,\n    ContentType,\n    LayoutOptions,\n    LayoutStyles,\n} from '../utils/types';\n\n/** Controls all {@link LayoutSystem} children sizing. */\nexport class ContentController\n{\n    protected layout: LayoutSystem;\n\n    /**\n     * List of all children of the layout, controlled by this controller.\n     * As the layout is a container, you can use all container methods on it,\n     * including addChild, but only elements added by layout\n     * config thought constructor of {@link ContentController} or using\n     * `addContent` method will be managed by this controller.\n     */\n    children: Map<string, Container> = new Map();\n\n    /**\n     * Creates all instances and manages configs\n     * @param {LayoutSystem} layout - Layout instance\n     * @param content - Content of the layout\n     * @param globalStyles - Global styles for layout and it's children\n     */\n    constructor(\n        layout: LayoutSystem,\n        content?: Content,\n        globalStyles?: LayoutStyles\n    )\n    {\n        this.layout = layout;\n        this.children = new Map();\n        this.createContent(content, globalStyles);\n\n        this.layout.container.on('childRemoved', (child) =>\n            this.onChildRemoved(child)\n        );\n    }\n\n    /**\n     * Adds content to the layout.\n     * @param {Content} content - Content of the layout\n     * @param {LayoutStyles} parentGlobalStyles - Global styles for layout and it's children\n     */\n    createContent(content?: Content, parentGlobalStyles?: LayoutStyles)\n    {\n        if (!content) return;\n\n        const contentType = this.getContentType(content);\n        const customID = this.newID;\n\n        switch (contentType)\n        {\n            case 'layout':\n                const layout = content as Layout;\n\n                if (!layout.id)\n                {\n                    layout.id = `layout-${customID}`;\n                }\n\n                this.addContentElement(layout.id, layout);\n                break;\n            case 'container':\n                this.addContentElement(\n                    `container-${customID}`,\n                    content as Container\n                );\n                break;\n            case 'string':\n                const text = new Text({\n                    text: content,\n                    style: this.layout.textStyle,\n                });\n\n                this.addContentElement(`text-${customID}`, text);\n                break;\n            case 'text':\n                const textInstance = content as Text;\n\n                for (const key in this.layout.textStyle)\n                {\n                    const styleKey = key as keyof PixiTextStyle;\n\n                    (textInstance.style as any)[styleKey]\n                        = this.layout.textStyle[styleKey];\n                }\n\n                this.addContentElement(`text-${customID}`, textInstance);\n                break;\n            case 'layoutConfig':\n                const layoutConfig = content as LayoutOptions;\n\n                if (parentGlobalStyles)\n                {\n                    if (layoutConfig.globalStyles)\n                    {\n                        layoutConfig.globalStyles = {\n                            ...parentGlobalStyles,\n                            ...(layoutConfig.globalStyles as any),\n                        };\n                    }\n                    else\n                    {\n                        layoutConfig.globalStyles = { ...parentGlobalStyles };\n                    }\n                }\n\n                if (!layoutConfig.id)\n                {\n                    layoutConfig.id = `layout-${customID}`;\n                }\n\n                this.addContentElement(\n                    layoutConfig.id,\n                    new Layout(layoutConfig)\n                );\n                break;\n            case 'object':\n                const contentList = content as ContentList[];\n\n                // this is where we are managing object keys, and assign them as ids of the added elements\n                for (const id in contentList)\n                {\n                    const idKey = id as keyof typeof content;\n                    const contentElement = content[idKey] as any;\n\n                    const contentType = this.getContentType(contentElement);\n                    let defaultStyles = this.layout.textStyle; // default text style of the layout\n\n                    switch (contentType)\n                    {\n                        case 'string':\n                            if (\n                                parentGlobalStyles\n                                && parentGlobalStyles[idKey]\n                            )\n                            {\n                                // if there are predefined styles for this id\n                                defaultStyles = {\n                                    ...defaultStyles,\n                                    ...stylesToPixiTextStyles(\n                                        parentGlobalStyles[idKey]\n                                    ),\n                                };\n                            }\n\n                            const text = new Text({\n                                text: contentElement,\n                                style: defaultStyles,\n                            });\n\n                            this.addContentElement(idKey, text);\n                            break;\n                        case 'text':\n                            const textInstance = contentElement as Text;\n\n                            if (\n                                parentGlobalStyles\n                                && parentGlobalStyles[idKey]\n                            )\n                            {\n                                // if there are predefined styles for this id\n                                defaultStyles = {\n                                    ...defaultStyles,\n                                    ...stylesToPixiTextStyles(\n                                        parentGlobalStyles[idKey]\n                                    ),\n                                };\n                            }\n\n                            textInstance.style = defaultStyles;\n\n                            this.addContentElement(idKey, textInstance);\n                            break;\n                        case 'layout':\n                            const layoutInstance = contentElement as Layout;\n\n                            if (\n                                parentGlobalStyles\n                                && parentGlobalStyles[idKey]\n                            )\n                            {\n                                layoutInstance.setStyles(\n                                    parentGlobalStyles[idKey]\n                                );\n                                layoutInstance.layout.updateParents();\n                            }\n\n                            this.createContent(layoutInstance);\n                            break;\n                        case 'container':\n                            this.addContentElement(idKey, contentElement);\n                            break;\n                        case 'layoutConfig':\n                            this.createContent({\n                                ...contentElement,\n                                globalStyles: parentGlobalStyles,\n                                id: idKey, // we are rewriting this id with the key of the object, even if it is set\n                            });\n                            break;\n                        case 'object':\n                            this.createContent(\n                                contentElement,\n                                parentGlobalStyles\n                            );\n                            break;\n                        case 'array':\n                            this.createContent(\n                                contentElement,\n                                parentGlobalStyles\n                            );\n                            break;\n                        default: // do nothing\n                    }\n                }\n                break;\n            case 'array':\n                const contentArray = content as Array<LayoutOptions>;\n\n                contentArray.forEach((content) =>\n                    this.createContent(content, parentGlobalStyles)\n                );\n                break;\n            default:\n                throw new Error('Unknown content type of the layout.');\n        }\n    }\n\n    /**\n     * Adds content element to the layout and register it in Content controller registry.\n     * @param {string} id - ID of the element.\n     * @param {Container } content - pixi container instance to be added.\n     */\n    addContentElement(id: string, content: Container)\n    {\n        if (id && this.children.has(id))\n        {\n            console.error(\n                `Element with '${id}' duplicates, be careful using id selectors with it.`\n            );\n        }\n\n        this.children.set(id, content);\n        this.layout.container.addChild(content);\n    }\n\n    /**\n     * Get first child of the layout\n     * @returns {Container} - First child of the layout\n     */\n    get firstChild(): Container\n    {\n        return this.children.get(this.children.keys().next().value);\n    }\n\n    /**\n     * Resizes all children.\n     * @param width\n     * @param height\n     */\n    resize(width: number, height: number)\n    {\n        this.children.forEach((child) =>\n        {\n            if (child.isPixiLayout || child instanceof Layout)\n            {\n                child.layout.resize(width, height);\n            }\n        });\n    }\n\n    protected get newID(): string\n    {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    /**\n     * Get element from the layout child tree by it's ID\n     * @param id\n     */\n    getByID(id: string): Container | undefined\n    {\n        let result = this.children.get(id);\n\n        if (!result)\n        {\n            this.children.forEach((child) =>\n            {\n                if (child.isPixiLayout || child instanceof Layout)\n                {\n                    const res = child.layout.content.getByID(id);\n\n                    if (res)\n                    {\n                        result = res;\n                    }\n                }\n            });\n        }\n\n        return result;\n    }\n\n    protected getContentType(content: Content): ContentType\n    {\n        if (typeof content === 'string') return 'string';\n\n        if (content instanceof Text) return 'text';\n\n        if (content instanceof Layout) return 'layout';\n\n        if ((content as any).isPixiLayout) return 'layout';\n\n        if (\n            content instanceof Sprite\n            || content instanceof Graphics\n            || content instanceof Container\n        )\n        {\n            if (content.isPixiLayout) return 'layout';\n\n            return 'container';\n        }\n\n        if (Array.isArray(content)) return 'array';\n\n        if (typeof content === 'object')\n        {\n            if (content?.content)\n            {\n                return 'layoutConfig';\n            }\n\n            return 'object';\n        }\n\n        return 'unknown';\n    }\n\n    /**\n     * Removes content by its id.\n     * @param id\n     */\n    removeContent(id: string)\n    {\n        const content = this.getByID(id);\n\n        if (content)\n        {\n            this.layout.container.removeChild(content);\n            this.children.delete(id);\n        }\n    }\n\n    protected onChildRemoved(child: Container)\n    {\n        const registeredChild = this.getChild(child);\n\n        if (registeredChild)\n        {\n            this.children.delete(registeredChild);\n            this.layout.updateParents();\n        }\n    }\n\n    protected getChild(childInstance: Container): string | undefined\n    {\n        for (const [key, value] of this.children.entries())\n        {\n            if (value === childInstance)\n            {\n                return key;\n            }\n        }\n\n        return undefined;\n    }\n}\n"],"names":["Text","Layout","contentType","stylesToPixiTextStyles","text","textInstance","content","Sprite","Graphics","Container"],"mappings":"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"}