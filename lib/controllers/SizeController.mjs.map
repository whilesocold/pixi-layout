{"version":3,"file":"SizeController.mjs","sources":["../../src/controllers/SizeController.ts"],"sourcesContent":["/* eslint-disable no-case-declarations */\nimport { Container, Graphics, NineSliceSprite, Sprite, Text, TilingSprite } from 'pixi.js';\nimport { LayoutSystem } from '../Layout';\nimport { getNumber, isItJustAText } from '../utils/helpers';\nimport { FlexNumber, SizeControl } from '../utils/types';\n\n/** Size controller manages {@link LayoutSystem} and it's content size. */\nexport class SizeController\n{\n    protected layout: LayoutSystem;\n    protected _width: number;\n    protected _height: number;\n    protected bg: Graphics | Container;\n    protected overflowMask: Graphics;\n\n    parentWidth = 0;\n    parentHeight = 0;\n\n    /**\n     * Creates size controller.\n     * @param {LayoutSystem} layout - Layout to control.\n     */\n    constructor(layout: LayoutSystem)\n    {\n        this.layout = layout;\n    }\n\n    /**\n     * Updates layout size and all children sizes\n     * @param {number} parentWidth - Parent width\n     * @param {number} parentHeight - Parent height\n     */\n    resize(parentWidth?: number, parentHeight?: number)\n    {\n        let finalWidth = 0;\n        let finalHeight = 0;\n\n        if (parentWidth !== undefined)\n        {\n            this.parentWidth = parentWidth;\n        }\n\n        if (parentHeight !== undefined)\n        {\n            this.parentHeight = parentHeight;\n        }\n\n        const {\n            width,\n            height,\n            maxWidth,\n            maxHeight,\n            minWidth,\n            minHeight,\n            scaleX,\n            scaleY,\n            background,\n            paddingLeft,\n            paddingRight,\n            paddingTop,\n            paddingBottom,\n            aspectRatio,\n        } = this.layout.style;\n\n        const widthModificator = this.getAutoSizeModificator(width);\n        const heightModificator = this.getAutoSizeModificator(height);\n\n        switch (widthModificator)\n        {\n            case 'innerText':\n                // width is auto, there is only 1 child and it is text\n                // wordWrap style is true\n                // resize basing on text width\n\n                // try to fit text in one line\n                this.innerText.style.wordWrap = false;\n\n                const parentPaddingLeft\n                    = this.layout.container.parent?.layout?.style?.paddingLeft\n                    ?? 0;\n                const parentPaddingRight\n                    = this.layout.container.parent?.layout?.style?.paddingRight\n                    ?? 0;\n\n                const paddings\n                    = paddingLeft\n                    + paddingRight\n                    + parentPaddingLeft\n                    + parentPaddingRight;\n\n                const availableSpaceHor = this.parentWidth - paddings;\n                const needToBeResized\n                    = this.innerText.width + paddings > this.parentWidth;\n\n                if (needToBeResized)\n                {\n                    this.innerText.style.wordWrap = true;\n\n                    this.innerText.style.wordWrapWidth = availableSpaceHor;\n                }\n\n                const textWidthPaddings\n                    = this.innerText.width + paddingLeft + paddingRight;\n\n                finalWidth = textWidthPaddings;\n                break;\n\n            case 'background':\n                // width is auto, there is more than 1 child or it is not text\n                // resize basing on background width\n                finalWidth = (background as Container).width;\n\n                break;\n\n            case 'contentSize':\n                // width is basing on content\n                let childrenWidth = 0;\n\n                // we need to resize content, as it will update the sizes of the children first\n                this.layout.content.resize(this.parentWidth, this.parentHeight);\n\n                const { firstChild } = this.layout.content;\n\n                // add first element as at lease one element to set width\n                if (firstChild && firstChild.layout)\n                {\n                    childrenWidth\n                        += firstChild.width\n                        + firstChild.layout.style.marginLeft\n                        + firstChild.layout.style.marginRight;\n                }\n                else if (\n                    firstChild instanceof Container\n                    && firstChild.width\n                )\n                {\n                    childrenWidth += firstChild.width;\n                }\n\n                this.layout.content.children.forEach((child) =>\n                {\n                    if (child === firstChild)\n                    {\n                        // skip first element as it was already added\n                        return;\n                    }\n\n                    if (\n                        child.layout\n                        && child.layout.style.display !== 'block'\n                    )\n                    {\n                        if (child.layout.style.position)\n                        {\n                            return;\n                        }\n\n                        childrenWidth\n                            += child.width + child.layout.style.marginLeft;\n                    }\n                    else if (child instanceof Container && child.width)\n                    {\n                        childrenWidth += child.width;\n                    }\n                });\n\n                // height is basing on content height\n                finalWidth = childrenWidth + paddingLeft + paddingRight;\n                break;\n\n            case 'parentSize':\n                // resize to parent width\n                finalWidth = this.parentWidth;\n\n                break;\n\n            case 'static':\n            default:\n                finalWidth = getNumber(width, this.parentWidth);\n                break;\n        }\n\n        switch (heightModificator)\n        {\n            case 'innerText':\n                // height is auto, there is only 1 child and it is text\n                // resize basing on text height\n                finalHeight\n                    = this.innerText?.height + paddingBottom + paddingTop;\n\n                break;\n\n            case 'background':\n                // height is auto, there is more than 1 child or it is not text\n                // resize basing on background height\n                finalHeight = (background as Container).height;\n\n                break;\n\n            case 'parentSize':\n                // resize to parent width\n                finalHeight = this.parentHeight;\n\n                break;\n\n            case 'contentSize':\n                // height is basing on content\n                let childrenHeight = 0;\n\n                // we need to resize content, as it will update the sizes of the children first\n                this.layout.content.resize(this.parentWidth, this.parentHeight);\n\n                const { firstChild } = this.layout.content;\n\n                // add first element as at lease one element to set width\n                if (firstChild instanceof Container && firstChild.height)\n                {\n                    childrenHeight += firstChild.height;\n                }\n                else if (firstChild && firstChild.layout)\n                {\n                    if (!firstChild.layout.style.position)\n                    {\n                        childrenHeight += firstChild.height;\n                    }\n                }\n\n                this.layout.content.children.forEach((child) =>\n                {\n                    if (child === firstChild)\n                    {\n                        // skip first element as it was already added\n                        return;\n                    }\n\n                    if (child.layout && child.layout.style.position)\n                    {\n                        // skip absolute positioned elements\n                        return;\n                    }\n\n                    if (child.layout)\n                    {\n                        if (child.layout.style.display === 'block')\n                        {\n                            childrenHeight += child.height;\n                        }\n                        else if (child.height > childrenHeight)\n                        {\n                            childrenHeight = child.height;\n                        }\n                    }\n                    else if (child.height > childrenHeight)\n                    {\n                        childrenHeight = child.height;\n                    }\n                });\n\n                if (isItJustAText(this.layout))\n                {\n                    finalHeight = this.innerText?.height;\n                }\n\n                // height is basing on content height\n                finalHeight = childrenHeight + paddingTop + paddingBottom;\n\n                break;\n\n            case 'static':\n            default:\n                finalHeight = getNumber(height, this.parentHeight);\n                break;\n        }\n\n        if (finalWidth < 0) finalWidth = 0;\n        if (finalHeight < 0) finalHeight = 0;\n\n        this._width = finalWidth;\n        this._height = finalHeight;\n\n        this.layout.container.scale.set(scaleX, scaleY);\n\n        if (\n            aspectRatio === 'flex'\n            || maxWidth\n            || maxHeight\n            || minWidth\n            || minHeight\n        )\n        {\n            this.fitToSize(this.parentWidth, this.parentHeight);\n        }\n\n        this.fitInnerText(finalWidth, finalHeight);\n\n        if (this._width === 0 || this._height === 0)\n        {\n            this.layout.container.visible = false;\n\n            return;\n        }\n\n        this.updateBG(finalWidth, finalHeight);\n        this.updateMask();\n\n        this.layout.align.resize(this.parentWidth, this.parentHeight);\n    }\n\n    /**\n     * Render and update the background of layout basing on it's current state.\n     * @param finalWidth - Width of the layout.\n     * @param finalHeight - Height of the layout.\n     */\n    protected updateBG(finalWidth: number, finalHeight: number)\n    {\n        const { background } = this.layout.style;\n\n        if (\n            background instanceof NineSliceSprite\n            || background instanceof TilingSprite\n            || background instanceof Sprite\n            || background instanceof Container\n        )\n        {\n            if (background instanceof Sprite)\n            {\n                background.anchor.set(0.5);\n                background.position.set(finalWidth / 2, finalHeight / 2);\n            }\n\n            if (!this.bg)\n            {\n                this.bg = background;\n\n                this.layout.container.addChildAt(this.bg, 0);\n            }\n\n            switch (this.layout.style.backgroundSize)\n            {\n                case 'contain':\n                    background.scale.set(\n                        Math.min(\n                            finalWidth / background.width,\n                            finalHeight / background.height\n                        )\n                    );\n                    break;\n                case 'cover':\n                    background.scale.set(\n                        Math.max(\n                            finalWidth / background.width,\n                            finalHeight / background.height\n                        )\n                    );\n                    break;\n                case 'stretch':\n                    background.width = finalWidth;\n                    background.height = finalHeight;\n                    break;\n            }\n        }\n        else\n        {\n            const color = background !== 'transparent' && background;\n\n            const { borderRadius } = this.layout.style;\n            const { width, height } = this;\n\n            if (color && width && height)\n            {\n                if (!this.bg)\n                {\n                    this.bg = new Graphics();\n                    this.layout.container.addChildAt(this.bg, 0);\n                }\n\n                let x = 0;\n                let y = 0;\n\n                const { anchorX, anchorY } = this.layout.style;\n\n                if (anchorX !== undefined)\n                {\n                    x -= width * anchorX;\n                }\n\n                if (anchorY !== undefined)\n                {\n                    y -= height * anchorY;\n                }\n\n                if (this.bg instanceof Graphics)\n                {\n                    this.bg\n                        .clear()\n                        .roundRect(x, y, width, height, borderRadius)\n                        .fill(color);\n                }\n            }\n            else if (this.bg)\n            {\n                this.layout.container.removeChild(this.bg);\n                delete this.bg;\n            }\n        }\n    }\n\n    /** Render and update the mask of layout basing on it's current state. Mask is used to hide overflowing content. */\n    protected updateMask()\n    {\n        const { overflow, borderRadius } = this.layout.style;\n        const { width, height } = this;\n\n        if (overflow === 'hidden' && width && height)\n        {\n            if (!this.overflowMask)\n            {\n                this.overflowMask = new Graphics();\n                this.layout.container.addChild(this.overflowMask);\n            }\n\n            let x = 0;\n            let y = 0;\n\n            const { anchorX, anchorY } = this.layout.style;\n\n            if (anchorX !== undefined)\n            {\n                x -= width * anchorX;\n            }\n\n            if (anchorY !== undefined)\n            {\n                y -= height * anchorY;\n            }\n\n            this.overflowMask\n                .clear()\n                .roundRect(x, y, width, height, borderRadius)\n                .fill(0xffffff);\n\n            this.layout.container.mask = this.overflowMask;\n        }\n        else\n        {\n            this.layout.container.mask = null;\n            delete this.overflowMask;\n        }\n    }\n\n    protected fitInnerText(width: number, height: number)\n    {\n        if (!isItJustAText(this.layout))\n        {\n            return;\n        }\n\n        const { paddingLeft, paddingRight, paddingTop, paddingBottom }\n            = this.layout.style;\n\n        if (this.innerText.style.wordWrap)\n        {\n            const scale = this.layout.container?.scale.x ?? 1;\n\n            this.innerText.style.wordWrapWidth\n                = (width - paddingLeft - paddingRight) * scale;\n        }\n        else\n        {\n            this.innerText.scale.set(1);\n\n            const textWidth = this.innerText.width + paddingLeft + paddingRight;\n            const textHeight\n                = this.innerText.height + paddingTop + paddingBottom;\n\n            const horOverflow = textWidth > width;\n            const verOverflow = textHeight > height;\n\n            const horScale = width / (textWidth + paddingLeft + paddingRight);\n            const vertScale\n                = height / (textHeight + paddingBottom + paddingTop);\n\n            if (horOverflow || verOverflow)\n            {\n                this.innerText.scale.set(Math.min(horScale, vertScale));\n            }\n        }\n    }\n\n    /**\n     * Get type of size control basing on styles and in case if width of the layout is set to `auto`.\n     * @param size - Width or height of the layout.\n     */\n    protected getAutoSizeModificator(size: FlexNumber | 'auto'): SizeControl\n    {\n        const { background, display } = this.layout.style;\n\n        if (size !== 'auto')\n        {\n            return 'static';\n        }\n\n        if (display === 'block')\n        {\n            return 'parentSize';\n        }\n\n        if (\n            background instanceof Container\n            && background.width\n            && background.height\n        )\n        {\n            return 'background';\n        }\n\n        if (isItJustAText(this.layout) && this.layout.style.wordWrap)\n        {\n            return 'innerText';\n        }\n\n        if (size === 'auto')\n        {\n            return 'contentSize';\n        }\n\n        return 'static';\n    }\n\n    /**\n     * Get text element if layout is just a wrapper for a text element.\n     * @returns {Text} - Pixi Text element.\n     */\n    protected get innerText(): Text\n    {\n        if (!isItJustAText(this.layout))\n        {\n            return null;\n        }\n\n        const { firstChild } = this.layout.content;\n\n        return firstChild as Text;\n    }\n\n    /** Get width of the controlled layout. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * Set width of the controlled layout. And align children.\n     * @param {FlexNumber} width - Width to set.\n     */\n    set width(width: FlexNumber)\n    {\n        this._width = getNumber(width, this.parentWidth);\n        this.layout.align.resize(this.parentWidth, this.parentHeight);\n    }\n\n    /** Get height of the controlled layout. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Set height of the controlled layout. And align children.\n     * @param {FlexNumber} height - Height to set.\n     */\n    set height(height: FlexNumber)\n    {\n        this._height = getNumber(height, this.parentHeight);\n        this.layout.align.resize(this.parentWidth, this.parentHeight);\n    }\n\n    /**\n     * Fits controlled layout into parent size, scales it down if does not fit.\n     *\n     * This method is called when maxWidth or maxHeight is set.\n     * @param parentWidth\n     * @param parentHeight\n     */\n    protected fitToSize(parentWidth: number, parentHeight: number)\n    {\n        const { maxWidth, maxHeight, minWidth, minHeight, aspectRatio }\n            = this.layout.style;\n        const { marginLeft, marginRight, marginBottom, marginTop }\n            = this.layout.style;\n\n        const currentScaleX = this.layout.container.scale.x;\n        const currentScaleY = this.layout.container.scale.y;\n\n        const layoutWidth = this.layout.width + marginLeft + marginRight;\n        const layoutHeight = this.layout.height + marginTop + marginBottom;\n\n        const maxWidthVal = getNumber(maxWidth, parentWidth);\n        const maxHeightVal = getNumber(maxHeight, parentHeight);\n\n        const minWidthVal = getNumber(minWidth, parentWidth);\n        const minHeightVal = getNumber(minHeight, parentHeight);\n\n        if (aspectRatio === 'flex')\n        {\n            if (maxWidthVal && this.width > maxWidthVal)\n            {\n                this.width = maxWidthVal;\n            }\n\n            if (maxHeightVal && this.height > maxHeightVal)\n            {\n                this.height = maxHeightVal;\n            }\n\n            let minWidthScale: number;\n            let minHeightScale: number;\n\n            if (minWidthVal && this.width < minWidthVal)\n            {\n                minWidthScale = this.width / minWidthVal;\n                this.width = minWidthVal;\n            }\n\n            if (minHeightVal && this.height < minHeightVal)\n            {\n                minHeightScale = this.height / minHeightVal;\n                this.height = minHeightVal;\n            }\n\n            if (minWidthScale || minHeightScale)\n            {\n                const scale\n                    = minWidthScale && minHeightScale\n                        ? Math.min(minWidthScale, minHeightScale)\n                        : minWidthScale ?? minHeightScale;\n\n                this.layout.container.scale.set(scale);\n            }\n\n            return;\n        }\n\n        const maxFitScaleX = maxWidthVal / layoutWidth;\n        const maxFitScaleY = maxHeightVal / layoutHeight;\n\n        const minFitScaleX = minWidthVal / layoutWidth;\n        const minFitScaleY = minHeightVal / layoutHeight;\n\n        let finalScaleX = currentScaleX;\n        let finalScaleY = currentScaleY;\n\n        if (layoutWidth * currentScaleX > maxWidthVal)\n        {\n            finalScaleX = maxFitScaleX;\n        }\n\n        if (layoutHeight * currentScaleY > maxHeightVal)\n        {\n            finalScaleY = maxFitScaleY;\n        }\n\n        let finalScaleToFit = Math.min(finalScaleX, finalScaleY);\n\n        if (minWidth || minHeight)\n        {\n            if (minWidth && minHeight)\n            {\n                finalScaleToFit = Math.max(minFitScaleX, minFitScaleY);\n            }\n            else if (minWidth)\n            {\n                finalScaleToFit = finalScaleX;\n            }\n            else if (minHeight)\n            {\n                finalScaleToFit = minFitScaleY;\n            }\n        }\n\n        this.layout.container.scale.set(finalScaleToFit);\n    }\n}\n"],"names":[],"mappings":"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"}