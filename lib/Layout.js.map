{"version":3,"file":"Layout.js","sources":["../src/Layout.ts"],"sourcesContent":["import { Container } from 'pixi.js';\nimport { AlignController } from './controllers/AlignController';\nimport { ContentController } from './controllers/ContentController';\nimport { SizeController } from './controllers/SizeController';\nimport { StyleController } from './controllers/StyleController';\nimport { PixiTextStyle } from './utils/text';\nimport { ConditionalStyles, Content, LayoutOptions, Styles } from './utils/types';\n\n/**\n * Layout controller class for any PixiJS Container based instance.\n *\n * To be be used for automatic align and resize children tree,\n * where every child behavior can be configured using css like configurations.\n *\n * Also it adds a list of css-like properties for styling like background style or text style,\n * check {@link SizeController} class.\n *\n * Any PixiJS Container based instance can be turned into a layout by calling {@link Layout#initLayout} method.\n * @example\n * const container = new Container().initLayout();\n *\n * container.layout?.setStyles({\n *      background: 'black',\n *      width: '100%',\n *      height: '100%',\n *      padding: 10,\n *      overflow: 'hidden',\n *      color: 'white',\n * }); // set styles\n *\n * container.layout?.setContent({\n *      text: 'Hello World',\n * }); // set content\n *\n * Or alternatively:\n *\n * const layoutSystem = new LayoutSystem({\n *      id: 'root',\n *      content: 'Hello World',\n *      styles: {\n *          background: 'black',\n *      }\n * }); // create layout system\n *\n * app.stage.addChild(layoutSystem.container); // add layout system generated container to the stage\n */\nexport class LayoutSystem\n{\n    /** Container for all layout children. */\n    container: Container;\n\n    /** ID of layout, can be used to set styles in the globalStyles object somewhere higher in hierarchal tree. */\n    id: string;\n\n    /** {@link SizeController} is a class for controlling layout and all it's children sizes. */\n    size: SizeController;\n\n    /** {@link AlignController} is a class for controlling layout and all it's children alignment. */\n    align: AlignController;\n\n    /** {@link StyleController} is a class for controlling styles. */\n    protected _style: StyleController;\n\n    /** {@link ContentController} controller is a class for controlling layouts children. */\n    content: ContentController;\n\n    /** Stores isPortrait state */\n    isPortrait: boolean;\n\n    /**\n     * Creates layout system instance.\n     * @param options - Layout options\n     * @param options.id - ID of the layout.\n     * @param options.styles - Styles of the layout. List of available styles can be found in {@link StyleController}.\n     * @param options.content - Content of the layout.\n     * @param options.globalStyles - Global styles for layout and it's children.\n     * @param container - Container for all layout children, will be created if not provided.\n     */\n    constructor(options?: LayoutOptions, container?: Container)\n    {\n        this.container = container || new Container();\n\n        this.id = options?.id;\n\n        if (options?.globalStyles)\n        {\n            // check if there is a global style for this layout\n            const styles = options.globalStyles[this.id];\n\n            if (styles && options.styles)\n            {\n                options.styles = { ...styles, ...options.styles };\n            }\n            else if (styles)\n            {\n                options.styles = styles;\n            }\n        }\n\n        // order here is important as controllers are dependent on each other\n        this.size = new SizeController(this);\n        this._style = new StyleController(this, options?.styles);\n        this.align = new AlignController(this);\n        this.content = new ContentController(\n            this,\n            options?.content,\n            options?.globalStyles\n        );\n    }\n\n    /**\n     * Resize method should be called on every parent size change.\n     * @param parentWidth\n     * @param parentHeight\n     */\n    resize(parentWidth?: number, parentHeight?: number)\n    {\n        const width = parentWidth || this.contentWidth || this.size.parentWidth;\n        const height\n            = parentHeight || this.contentHeight || this.size.parentHeight;\n\n        this.isPortrait = width < height;\n\n        this._style.applyConditionalStyles();\n        this.size.resize(parentWidth, parentHeight);\n    }\n\n    /** Recalculate positions and sizes of layouts three. */\n    refresh()\n    {\n        this.resize(this.size.parentWidth, this.size.parentHeight);\n    }\n\n    /** Returns with of the container */\n    get contentWidth(): number | undefined\n    {\n        if (!this.container?.parent)\n        {\n            return undefined;\n        }\n\n        return this.container.parent.width;\n    }\n\n    /** Returns height of the container */\n    get contentHeight(): number | undefined\n    {\n        if (!this.container?.parent)\n        {\n            return undefined;\n        }\n\n        return this.container.parent.height;\n    }\n\n    /** Sets the width of layout.  */\n    set width(value: number)\n    {\n        this.size.width = value;\n    }\n\n    /** Gets the width of layout. */\n    get width()\n    {\n        return this.size.width;\n    }\n\n    /** Sets the height of layout. */\n    set height(value: number)\n    {\n        this.size.height = value;\n    }\n\n    /** Gets the height of layout. */\n    get height()\n    {\n        return this.size.height;\n    }\n\n    /**\n     * Adds content to the layout and reposition/resize other elements and the layout basing on styles.\n     * @param {Content} content - Content to be added. Can be string, Container, Layout, LayoutOptions or array of those.\n     * Also content can be an object with inner layout ids as a keys, and Content as values.\n     */\n    addContent(content: Content)\n    {\n        this.content.createContent(content);\n        this.updateParents();\n    }\n\n    /**\n     * Removes content of the layout by its id and reposition/resize other elements and the layout basing on styles.\n     * @param {string} id - id of the content to be removed.\n     */\n    removeChildByID(id: string)\n    {\n        this.content.removeContent(id);\n    }\n\n    /**\n     * Get element from the layout child tree by it's ID\n     * @param {string} id - id of the content to be foundS.\n     */\n    getChildByID(id: string): Layout | Container | undefined\n    {\n        return this.content.getByID(id);\n    }\n\n    /**\n     * This is used in case if layout or some of it's children was changed\n     * and we need to update sizes and positions for all the parents tree.\n     */\n    updateParents()\n    {\n        const rootLayout = this.getRootLayout();\n\n        rootLayout.size.resize();\n    }\n\n    /** Returns root layout of the layout tree. */\n    getRootLayout(): LayoutSystem\n    {\n        if (this.container.parent?.layout)\n        {\n            return this.container.parent.layout.getRootLayout();\n        }\n\n        return this;\n    }\n\n    /**\n     * Updates the layout styles and resize/reposition it and its children basing on new styles.\n     * @param styles\n     */\n    setStyles(styles: Styles & ConditionalStyles)\n    {\n        this._style.set(styles);\n        this.updateParents();\n    }\n\n    /** Layout text styles. */\n    get textStyle(): Partial<PixiTextStyle>\n    {\n        return this._style.textStyle;\n    }\n\n    /** Layout styles. */\n    get style(): Styles\n    {\n        return this._style.getAll();\n    }\n\n    /** Returns true if root layout is in landscape mode. */\n    get isRootLayoutPortrait(): boolean\n    {\n        return this.getRootLayout().isPortrait === true;\n    }\n}\n\n/**\n * Container with layout system initiated.\n * @example\n *\n * const layout = new Layout({\n * \tstyles: {\n * \t\twidth: 100,\n * \t\theight: 100,\n * \t\tbackground: 'red',\n * \t},\n * \tcontent: [\n * \t\t'Hello world',\n * \t\t{\n * \t\t\tid: 'innerLayout1',\n * \t\t\ttext: 'Inner layout 1',\n * \t\t},\n * \t\t{\n * \t\t\tid: 'innerLayout2',\n * \t\t\ttext: 'Inner layout 2',\n * \t\t},\n * \t],\n * \tglobalStyles: {\n * \t\tinnerLayout1: {\n * \t\t\twidth: 200,\n * \t\t\theight: 200,\n * \t\t},\n * \t\tinnerLayout1: {\n * \t\t\twidth: 200,\n * \t\t\theight: 200,\n * \t\t},\n * \t},\n * });\n */\nexport class Layout extends Container\n{\n    override layout: LayoutSystem;\n\n    /**\n     * Creates layout container.\n     * @param options\n     */\n    constructor(options?: LayoutOptions)\n    {\n        super();\n\n        this.layout = new LayoutSystem(options, this);\n    }\n\n    /** Get {@link SizeController} */\n    get size(): SizeController\n    {\n        return this.layout.size;\n    }\n\n    /** {@link AlignController} */\n    get align(): AlignController\n    {\n        return this.layout.align;\n    }\n\n    /** {@link ContentController} */\n    get content(): ContentController\n    {\n        return this.layout.content;\n    }\n\n    /** ID of layout, can be used to set styles in the globalStyles. */\n    get id()\n    {\n        return this.layout.id;\n    }\n\n    /** ID of layout, can be used to set styles in the globalStyles. */\n    set id(value: string)\n    {\n        this.layout.id = value;\n    }\n\n    /** Returns with of the layouts content. */\n    get contentWidth(): number | undefined\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.contentWidth;\n    }\n\n    /** Returns height of the layouts content. */\n    get contentHeight(): number | undefined\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.contentHeight;\n    }\n\n    /** Set the width of layout.  */\n    override set width(value: number)\n    {\n        if (!this.layout) {\n            return;\n        }\n        this.layout.width = value;\n    }\n\n    /** Get the width of layout. */\n    override get width()\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.width;\n    }\n\n    /** Set the height of layout. */\n    override set height(value: number)\n    {\n        if (!this.layout) {\n            return;\n        }\n        this.layout.height = value;\n    }\n\n    /** Get the height of layout. */\n    override get height()\n    {\n        if (!this.layout) {\n            return 0;\n        }\n        return this.layout.height;\n    }\n\n    /**\n     * Add content to the layout system and reposition/resize elements basing on styles.\n     * @param {Content} content - Content to be added. Can be string, Container, Layout, LayoutOptions or array of those.\n     * Also content can be an object where keys are ids of child layouts to create, and Content as values.\n     */\n    addContent(content: Content)\n    {\n        this.layout.addContent(content);\n    }\n\n    /**\n     * Remove content from layout system by its id and reposition/resize elements basing on styles.\n     * @param {string} id - id of the content to be removed.\n     */\n    removeChildByID(id: string)\n    {\n        this.layout.removeChildByID(id);\n    }\n\n    /**\n     * Get element from the layout system children tree by it's ID\n     * @param {string} id - id of the content to be foundS.\n     */\n    getChildByID(id: string): Layout | Container | undefined\n    {\n        return this.layout.getChildByID(id);\n    }\n\n    /**\n     * Updates the layout styles and resize/reposition elements basing on new styles.\n     * @param styles\n     */\n    setStyles(styles: Styles)\n    {\n        this.layout.setStyles(styles);\n    }\n\n    /** Layout text styles. */\n    get textStyle(): Partial<PixiTextStyle>\n    {\n        return this.layout.textStyle;\n    }\n\n    /** Layout styles. */\n    get style(): Styles\n    {\n        return this.layout.style;\n    }\n\n    /**\n     * Resize method should be called on every parent size change.\n     * @param parentWidth\n     * @param parentHeight\n     */\n    resize(parentWidth?: number, parentHeight?: number)\n    {\n        this.layout.resize(parentWidth, parentHeight);\n    }\n\n    /** Recalculate positions and sizes of layouts three. */\n    refresh()\n    {\n        this.resize(this.size.parentWidth, this.size.parentHeight);\n    }\n}\n\ndeclare module 'pixi.js'\n{\n    interface Container\n    {\n        initLayout(config?: LayoutOptions): Container;\n        layout?: LayoutSystem;\n        isPixiLayout?: boolean;\n    }\n}\n\nif (!Container.prototype.initLayout)\n{\n    Object.defineProperty(Container.prototype, 'initLayout', {\n        value(options?: LayoutOptions): void\n        {\n            if (!this.layout)\n            {\n                this.layout = new LayoutSystem(options, this);\n                this.isPixiLayout = true;\n            }\n\n            return this;\n        },\n    });\n}\n"],"names":["Container","SizeController","StyleController","AlignController","ContentController"],"mappings":";;;;;;;;;;;;;;AA8CO,MAAM,YACb,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BI,WAAA,CAAY,SAAyB,SACrC,EAAA;AA9BA;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AAGA;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;AAGA;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AAGA;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AAGA;AAAA,IAAU,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAGV;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAGA;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AAaI,IAAK,IAAA,CAAA,SAAA,GAAY,SAAa,IAAA,IAAIA,iBAAU,EAAA,CAAA;AAE5C,IAAA,IAAA,CAAK,KAAK,OAAS,EAAA,EAAA,CAAA;AAEnB,IAAA,IAAI,SAAS,YACb,EAAA;AAEI,MAAA,MAAM,MAAS,GAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAE3C,MAAI,IAAA,MAAA,IAAU,QAAQ,MACtB,EAAA;AACI,QAAA,OAAA,CAAQ,SAAS,EAAE,GAAG,MAAQ,EAAA,GAAG,QAAQ,MAAO,EAAA,CAAA;AAAA,iBAE3C,MACT,EAAA;AACI,QAAA,OAAA,CAAQ,MAAS,GAAA,MAAA,CAAA;AAAA,OACrB;AAAA,KACJ;AAGA,IAAK,IAAA,CAAA,IAAA,GAAO,IAAIC,6BAAA,CAAe,IAAI,CAAA,CAAA;AACnC,IAAA,IAAA,CAAK,MAAS,GAAA,IAAIC,+BAAgB,CAAA,IAAA,EAAM,SAAS,MAAM,CAAA,CAAA;AACvD,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAIC,+BAAA,CAAgB,IAAI,CAAA,CAAA;AACrC,IAAA,IAAA,CAAK,UAAU,IAAIC,mCAAA;AAAA,MACf,IAAA;AAAA,MACA,OAAS,EAAA,OAAA;AAAA,MACT,OAAS,EAAA,YAAA;AAAA,KACb,CAAA;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAA,CAAO,aAAsB,YAC7B,EAAA;AACI,IAAA,MAAM,KAAQ,GAAA,WAAA,IAAe,IAAK,CAAA,YAAA,IAAgB,KAAK,IAAK,CAAA,WAAA,CAAA;AAC5D,IAAA,MAAM,MACA,GAAA,YAAA,IAAgB,IAAK,CAAA,aAAA,IAAiB,KAAK,IAAK,CAAA,YAAA,CAAA;AAEtD,IAAA,IAAA,CAAK,aAAa,KAAQ,GAAA,MAAA,CAAA;AAE1B,IAAA,IAAA,CAAK,OAAO,sBAAuB,EAAA,CAAA;AACnC,IAAK,IAAA,CAAA,IAAA,CAAK,MAAO,CAAA,WAAA,EAAa,YAAY,CAAA,CAAA;AAAA,GAC9C;AAAA;AAAA,EAGA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,CAAK,WAAa,EAAA,IAAA,CAAK,KAAK,YAAY,CAAA,CAAA;AAAA,GAC7D;AAAA;AAAA,EAGA,IAAI,YACJ,GAAA;AACI,IAAI,IAAA,CAAC,IAAK,CAAA,SAAA,EAAW,MACrB,EAAA;AACI,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACX;AAEA,IAAO,OAAA,IAAA,CAAK,UAAU,MAAO,CAAA,KAAA,CAAA;AAAA,GACjC;AAAA;AAAA,EAGA,IAAI,aACJ,GAAA;AACI,IAAI,IAAA,CAAC,IAAK,CAAA,SAAA,EAAW,MACrB,EAAA;AACI,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACX;AAEA,IAAO,OAAA,IAAA,CAAK,UAAU,MAAO,CAAA,MAAA,CAAA;AAAA,GACjC;AAAA;AAAA,EAGA,IAAI,MAAM,KACV,EAAA;AACI,IAAA,IAAA,CAAK,KAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,GACtB;AAAA;AAAA,EAGA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,KAAK,IAAK,CAAA,KAAA,CAAA;AAAA,GACrB;AAAA;AAAA,EAGA,IAAI,OAAO,KACX,EAAA;AACI,IAAA,IAAA,CAAK,KAAK,MAAS,GAAA,KAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,MACJ,GAAA;AACI,IAAA,OAAO,KAAK,IAAK,CAAA,MAAA,CAAA;AAAA,GACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OACX,EAAA;AACI,IAAK,IAAA,CAAA,OAAA,CAAQ,cAAc,OAAO,CAAA,CAAA;AAClC,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,EAChB,EAAA;AACI,IAAK,IAAA,CAAA,OAAA,CAAQ,cAAc,EAAE,CAAA,CAAA;AAAA,GACjC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,EACb,EAAA;AACI,IAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAAA,GAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aACA,GAAA;AACI,IAAM,MAAA,UAAA,GAAa,KAAK,aAAc,EAAA,CAAA;AAEtC,IAAA,UAAA,CAAW,KAAK,MAAO,EAAA,CAAA;AAAA,GAC3B;AAAA;AAAA,EAGA,aACA,GAAA;AACI,IAAI,IAAA,IAAA,CAAK,SAAU,CAAA,MAAA,EAAQ,MAC3B,EAAA;AACI,MAAA,OAAO,IAAK,CAAA,SAAA,CAAU,MAAO,CAAA,MAAA,CAAO,aAAc,EAAA,CAAA;AAAA,KACtD;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,MACV,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,IAAI,MAAM,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,SACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,SAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,KACJ,GAAA;AACI,IAAO,OAAA,IAAA,CAAK,OAAO,MAAO,EAAA,CAAA;AAAA,GAC9B;AAAA;AAAA,EAGA,IAAI,oBACJ,GAAA;AACI,IAAO,OAAA,IAAA,CAAK,aAAc,EAAA,CAAE,UAAe,KAAA,IAAA,CAAA;AAAA,GAC/C;AACJ,CAAA;AAmCO,MAAM,eAAeJ,iBAC5B,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOI,YAAY,OACZ,EAAA;AACI,IAAM,KAAA,EAAA,CAAA;AARV,IAAS,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAUL,IAAA,IAAA,CAAK,MAAS,GAAA,IAAI,YAAa,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAAA,GAChD;AAAA;AAAA,EAGA,IAAI,IACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,IAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,OACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,EACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,EAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,GAAG,KACP,EAAA;AACI,IAAA,IAAA,CAAK,OAAO,EAAK,GAAA,KAAA,CAAA;AAAA,GACrB;AAAA;AAAA,EAGA,IAAI,YACJ,GAAA;AACI,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AACd,MAAO,OAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,OAAO,KAAK,MAAO,CAAA,YAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,aACJ,GAAA;AACI,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AACd,MAAO,OAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,OAAO,KAAK,MAAO,CAAA,aAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAa,MAAM,KACnB,EAAA;AACI,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AACd,MAAA,OAAA;AAAA,KACJ;AACA,IAAA,IAAA,CAAK,OAAO,KAAQ,GAAA,KAAA,CAAA;AAAA,GACxB;AAAA;AAAA,EAGA,IAAa,KACb,GAAA;AACI,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AACd,MAAO,OAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,OAAO,KAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAa,OAAO,KACpB,EAAA;AACI,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AACd,MAAA,OAAA;AAAA,KACJ;AACA,IAAA,IAAA,CAAK,OAAO,MAAS,GAAA,KAAA,CAAA;AAAA,GACzB;AAAA;AAAA,EAGA,IAAa,MACb,GAAA;AACI,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AACd,MAAO,OAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,OAAO,KAAK,MAAO,CAAA,MAAA,CAAA;AAAA,GACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OACX,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,WAAW,OAAO,CAAA,CAAA;AAAA,GAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,EAChB,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,gBAAgB,EAAE,CAAA,CAAA;AAAA,GAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,EACb,EAAA;AACI,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,YAAA,CAAa,EAAE,CAAA,CAAA;AAAA,GACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,MACV,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,UAAU,MAAM,CAAA,CAAA;AAAA,GAChC;AAAA;AAAA,EAGA,IAAI,SACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,SAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGA,IAAI,KACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAA,CAAO,aAAsB,YAC7B,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,MAAO,CAAA,WAAA,EAAa,YAAY,CAAA,CAAA;AAAA,GAChD;AAAA;AAAA,EAGA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,CAAK,WAAa,EAAA,IAAA,CAAK,KAAK,YAAY,CAAA,CAAA;AAAA,GAC7D;AACJ,CAAA;AAYA,IAAI,CAACA,iBAAU,CAAA,SAAA,CAAU,UACzB,EAAA;AACI,EAAO,MAAA,CAAA,cAAA,CAAeA,iBAAU,CAAA,SAAA,EAAW,YAAc,EAAA;AAAA,IACrD,MAAM,OACN,EAAA;AACI,MAAI,IAAA,CAAC,KAAK,MACV,EAAA;AACI,QAAA,IAAA,CAAK,MAAS,GAAA,IAAI,YAAa,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAC5C,QAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AAAA,OACxB;AAEA,MAAO,OAAA,IAAA,CAAA;AAAA,KACX;AAAA,GACH,CAAA,CAAA;AACL;;;;;"}